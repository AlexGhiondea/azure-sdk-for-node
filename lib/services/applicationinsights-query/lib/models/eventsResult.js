/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * An event query result.
 *
 */
class EventsResult {
  /**
   * Create a EventsResult.
   * @property {array} [aimessages] OData messages for this response.
   * @property {object} [value]
   * @property {string} [value.id] The unique ID for this event.
   * @property {number} [value.count] Count of the event
   * @property {date} [value.timestamp] Timestamp of the event
   * @property {object} [value.customDimensions] Custom dimensions of the event
   * @property {object} [value.customDimensions.additionalProperties]
   * @property {object} [value.customMeasurements] Custom measurements of the
   * event
   * @property {object} [value.customMeasurements.additionalProperties]
   * @property {object} [value.operation] Operation info of the event
   * @property {string} [value.operation.name] Name of the operation
   * @property {string} [value.operation.id] ID of the operation
   * @property {string} [value.operation.parentId] Parent ID of the operation
   * @property {string} [value.operation.syntheticSource] Synthetic source of
   * the operation
   * @property {object} [value.session] Session info of the event
   * @property {string} [value.session.id] ID of the session
   * @property {object} [value.user] User info of the event
   * @property {string} [value.user.id] ID of the user
   * @property {string} [value.user.accountId] Account ID of the user
   * @property {string} [value.user.authenticatedId] Authenticated ID of the
   * user
   * @property {object} [value.cloud] Cloud info of the event
   * @property {string} [value.cloud.roleName] Role name of the cloud
   * @property {string} [value.cloud.roleInstance] Role instance of the cloud
   * @property {object} [value.ai] AI info of the event
   * @property {string} [value.ai.iKey] iKey of the app
   * @property {string} [value.ai.appName] Name of the application
   * @property {string} [value.ai.appId] ID of the application
   * @property {string} [value.ai.sdkVersion] SDK version of the application
   * @property {object} [value.application] Application info of the event
   * @property {string} [value.application.version] Version of the application
   * @property {object} [value.client] Client info of the event
   * @property {string} [value.client.model] Model of the client
   * @property {string} [value.client.os] Operating system of the client
   * @property {string} [value.client.type] Type of the client
   * @property {string} [value.client.browser] Browser of the client
   * @property {string} [value.client.ip] IP address of the client
   * @property {string} [value.client.city] City of the client
   * @property {string} [value.client.stateOrProvince] State or province of the
   * client
   * @property {string} [value.client.countryOrRegion] Country or region of the
   * client
   * @property {string} [value.type] Polymorphic Discriminator
   */
  constructor() {
  }

  /**
   * Defines the metadata of EventsResult
   *
   * @returns {object} metadata of EventsResult
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'eventsResult',
      type: {
        name: 'Composite',
        className: 'EventsResult',
        modelProperties: {
          aimessages: {
            required: false,
            serializedName: '@ai\\.messages',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ErrorInfoElementType',
                  type: {
                    name: 'Composite',
                    className: 'ErrorInfo'
                  }
              }
            }
          },
          value: {
            required: false,
            serializedName: 'value',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'EventsResultData',
              className: 'EventsResultData'
            }
          }
        }
      }
    };
  }
}

module.exports = EventsResult;
