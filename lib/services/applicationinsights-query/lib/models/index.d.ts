/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * The parameters for a single metrics query
 */
export interface MetricsPostBodySchemaParameters {
  /**
   * Possible values include: 'requests/count', 'requests/duration', 'requests/failed',
   * 'users/count', 'users/authenticated', 'pageViews/count', 'pageViews/duration',
   * 'client/processingDuration', 'client/receiveDuration', 'client/networkDuration',
   * 'client/sendDuration', 'client/totalDuration', 'dependencies/count', 'dependencies/failed',
   * 'dependencies/duration', 'exceptions/count', 'exceptions/browser', 'exceptions/server',
   * 'sessions/count', 'performanceCounters/requestExecutionTime',
   * 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue',
   * 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond',
   * 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond',
   * 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage',
   * 'availabilityResults/availabilityPercentage', 'availabilityResults/duration',
   * 'billing/telemetryCount', 'customEvents/count'
   */
  metricId: string;
  timespan?: string;
  aggregation?: string[];
  interval?: moment.Duration;
  segment?: string[];
  top?: number;
  orderby?: string;
  filter?: string;
}

/**
 * A metric request
*/
export interface MetricsPostBodySchema {
  /**
   * An identifier for this query.  Must be unique within the post body of the request.  This
   * identifier will be the 'id' property of the response object representing this query.
  */
  id: string;
  /**
   * The parameters for a single metrics query
  */
  parameters: MetricsPostBodySchemaParameters;
}

/**
 * A metric segment
*/
export interface MetricsSegmentInfo {
  /**
   * Start time of the metric segment (only when an interval was specified).
  */
  start?: Date;
  /**
   * Start time of the metric segment (only when an interval was specified).
  */
  end?: Date;
  /**
   * Segmented metric data (if further segmented).
  */
  segments?: MetricsSegmentInfo[];
  /**
   * Describes unknown properties. The value of an unknown property can be of "any" type.
  */
  [additionalPropertyName: string]: any;
}

/**
 * A metric result data.
*/
export interface MetricsResultInfo {
  /**
   * Start time of the metric.
  */
  start?: Date;
  /**
   * Start time of the metric.
  */
  end?: Date;
  /**
   * The interval used to segment the metric data.
  */
  interval?: moment.Duration;
  /**
   * Segmented metric data (if segmented).
  */
  segments?: MetricsSegmentInfo[];
  /**
   * Describes unknown properties. The value of an unknown property can be of "any" type.
  */
  [additionalPropertyName: string]: any;
}

/**
 * A metric result.
*/
export interface MetricsResult {
  value?: MetricsResultInfo;
}

export interface MetricsResultsItem {
  /**
   * The specified ID for this metric.
  */
  id: string;
  /**
   * The HTTP status code of this metric query.
  */
  status: number;
  /**
   * The results of this metric query.
  */
  body: MetricsResult;
}

/**
 * @summary Error details.
*/
export interface ErrorDetail {
  /**
   * The error's code.
  */
  code: string;
  /**
   * A human readable error message.
  */
  message: string;
  /**
   * Indicates which property in the request is responsible for the error.
  */
  target?: string;
  /**
   * Indicates which value in 'target' is responsible for the error.
  */
  value?: string;
  /**
   * Indicates resources which were responsible for the error.
  */
  resources?: string[];
  additionalProperties?: any;
}

/**
 * @summary The code and message for an error.
*/
export interface ErrorInfo {
  /**
   * A machine readable error code.
  */
  code: string;
  /**
   * A human readable error message.
  */
  message: string;
  /**
   * error details.
  */
  details?: ErrorDetail[];
  /**
   * Inner error details if they exist.
  */
  innererror?: ErrorInfo;
  additionalProperties?: any;
}

/**
 * Custom dimensions of the event
*/
export interface EventsResultDataCustomDimensions {
  additionalProperties?: any;
}

/**
 * Custom measurements of the event
*/
export interface EventsResultDataCustomMeasurements {
  additionalProperties?: any;
}

/**
 * Operation info for an event result
*/
export interface EventsOperationInfo {
  /**
   * Name of the operation
  */
  name?: string;
  /**
   * ID of the operation
  */
  id?: string;
  /**
   * Parent ID of the operation
  */
  parentId?: string;
  /**
   * Synthetic source of the operation
  */
  syntheticSource?: string;
}

/**
 * Session info for an event result
*/
export interface EventsSessionInfo {
  /**
   * ID of the session
  */
  id?: string;
}

/**
 * User info for an event result
*/
export interface EventsUserInfo {
  /**
   * ID of the user
  */
  id?: string;
  /**
   * Account ID of the user
  */
  accountId?: string;
  /**
   * Authenticated ID of the user
  */
  authenticatedId?: string;
}

/**
 * Cloud info for an event result
*/
export interface EventsCloudInfo {
  /**
   * Role name of the cloud
  */
  roleName?: string;
  /**
   * Role instance of the cloud
  */
  roleInstance?: string;
}

/**
 * AI related application info for an event result
*/
export interface EventsAiInfo {
  /**
   * iKey of the app
  */
  iKey?: string;
  /**
   * Name of the application
  */
  appName?: string;
  /**
   * ID of the application
  */
  appId?: string;
  /**
   * SDK version of the application
  */
  sdkVersion?: string;
}

/**
 * Application info for an event result
*/
export interface EventsApplicationInfo {
  /**
   * Version of the application
  */
  version?: string;
}

/**
 * Client info for an event result
*/
export interface EventsClientInfo {
  /**
   * Model of the client
  */
  model?: string;
  /**
   * Operating system of the client
  */
  os?: string;
  /**
   * Type of the client
  */
  type?: string;
  /**
   * Browser of the client
  */
  browser?: string;
  /**
   * IP address of the client
  */
  ip?: string;
  /**
   * City of the client
  */
  city?: string;
  /**
   * State or province of the client
  */
  stateOrProvince?: string;
  /**
   * Country or region of the client
  */
  countryOrRegion?: string;
}

/**
 * Events query result data.
*/
export interface EventsResultData {
  /**
   * The unique ID for this event.
  */
  id?: string;
  /**
   * Count of the event
  */
  count?: number;
  /**
   * Timestamp of the event
  */
  timestamp?: Date;
  /**
   * Custom dimensions of the event
  */
  customDimensions?: EventsResultDataCustomDimensions;
  /**
   * Custom measurements of the event
  */
  customMeasurements?: EventsResultDataCustomMeasurements;
  /**
   * Operation info of the event
  */
  operation?: EventsOperationInfo;
  /**
   * Session info of the event
  */
  session?: EventsSessionInfo;
  /**
   * User info of the event
  */
  user?: EventsUserInfo;
  /**
   * Cloud info of the event
  */
  cloud?: EventsCloudInfo;
  /**
   * AI info of the event
  */
  ai?: EventsAiInfo;
  /**
   * Application info of the event
  */
  application?: EventsApplicationInfo;
  /**
   * Client info of the event
  */
  client?: EventsClientInfo;
  /**
   * Polymorphic Discriminator
  */
  type: string;
}

/**
 * An events query result.
*/
export interface EventsResults {
  /**
   * OData context metadata endpoint for this response
  */
  odatacontext?: string;
  /**
   * OData messages for this response.
  */
  aimessages?: ErrorInfo[];
  /**
   * Contents of the events query result.
  */
  value?: EventsResultData[];
}

/**
 * An event query result.
*/
export interface EventsResult {
  /**
   * OData messages for this response.
  */
  aimessages?: ErrorInfo[];
  value?: EventsResultData;
}

/**
 * The trace information
*/
export interface EventsTraceInfo {
  /**
   * The trace message
  */
  message?: string;
  /**
   * The trace severity level
  */
  severityLevel?: number;
}

/**
 * A trace result
*/
export interface EventsTraceResult extends EventsResultData {
  trace?: EventsTraceInfo;
}

/**
 * The custom event information
*/
export interface EventsCustomEventInfo {
  /**
   * The name of the custom event
  */
  name?: string;
}

/**
 * A custom event result
*/
export interface EventsCustomEventResult extends EventsResultData {
  customEvent?: EventsCustomEventInfo;
}

/**
 * The page view information
*/
export interface EventsPageViewInfo {
  /**
   * The name of the page
  */
  name?: string;
  /**
   * The URL of the page
  */
  url?: string;
  /**
   * The duration of the page view
  */
  duration?: string;
  /**
   * The performance bucket of the page view
  */
  performanceBucket?: string;
}

/**
 * A page view result
*/
export interface EventsPageViewResult extends EventsResultData {
  pageView?: EventsPageViewInfo;
}

/**
 * The browser timing information
*/
export interface EventsBrowserTimingInfo {
  /**
   * The path of the URL
  */
  urlPath?: string;
  /**
   * The host of the URL
  */
  urlHost?: string;
  /**
   * The name of the page
  */
  name?: string;
  /**
   * The url of the page
  */
  url?: string;
  /**
   * The total duration of the load
  */
  totalDuration?: number;
  /**
   * The performance bucket of the load
  */
  performanceBucket?: string;
  /**
   * The network duration of the load
  */
  networkDuration?: number;
  /**
   * The send duration of the load
  */
  sendDuration?: number;
  /**
   * The receive duration of the load
  */
  receiveDuration?: number;
  /**
   * The processing duration of the load
  */
  processingDuration?: number;
}

/**
 * Client performance information
*/
export interface EventsClientPerformanceInfo {
  /**
   * The name of the client performance
  */
  name?: string;
}

/**
 * A browser timing result
*/
export interface EventsBrowserTimingResult extends EventsResultData {
  browserTiming?: EventsBrowserTimingInfo;
  clientPerformance?: EventsClientPerformanceInfo;
}

/**
 * The request info
*/
export interface EventsRequestInfo {
  /**
   * The name of the request
  */
  name?: string;
  /**
   * The URL of the request
  */
  url?: string;
  /**
   * Indicates if the request was successful
  */
  success?: string;
  /**
   * The duration of the request
  */
  duration?: number;
  /**
   * The performance bucket of the request
  */
  performanceBucket?: string;
  /**
   * The result code of the request
  */
  resultCode?: string;
  /**
   * The source of the request
  */
  source?: string;
  /**
   * The ID of the request
  */
  id?: string;
}

/**
 * A request result
*/
export interface EventsRequestResult extends EventsResultData {
  request?: EventsRequestInfo;
}

/**
 * The dependency info
*/
export interface EventsDependencyInfo {
  /**
   * The target of the dependency
  */
  target?: string;
  /**
   * The data of the dependency
  */
  data?: string;
  /**
   * Indicates if the dependency was successful
  */
  success?: string;
  /**
   * The duration of the dependency
  */
  duration?: number;
  /**
   * The performance bucket of the dependency
  */
  performanceBucket?: string;
  /**
   * The result code of the dependency
  */
  resultCode?: string;
  /**
   * The type of the dependency
  */
  type?: string;
  /**
   * The name of the dependency
  */
  name?: string;
  /**
   * The ID of the dependency
  */
  id?: string;
}

/**
 * A dependency result
*/
export interface EventsDependencyResult extends EventsResultData {
  dependency?: EventsDependencyInfo;
}

/**
 * A parsed stack entry
*/
export interface EventsExceptionDetailsParsedStack {
  /**
   * The assembly of the stack entry
  */
  assembly?: string;
  /**
   * The method of the stack entry
  */
  method?: string;
  /**
   * The level of the stack entry
  */
  level?: number;
  /**
   * The line of the stack entry
  */
  line?: number;
}

/**
 * Exception details
*/
export interface EventsExceptionDetail {
  /**
   * The severity level of the exception detail
  */
  severityLevel?: string;
  /**
   * The outer ID of the exception detail
  */
  outerId?: string;
  /**
   * The message of the exception detail
  */
  message?: string;
  /**
   * The type of the exception detail
  */
  type?: string;
  /**
   * The ID of the exception detail
  */
  id?: string;
  /**
   * The parsed stack
  */
  parsedStack?: EventsExceptionDetailsParsedStack[];
}

/**
 * The exception info
*/
export interface EventsExceptionInfo {
  /**
   * The severity level of the exception
  */
  severityLevel?: number;
  /**
   * The problem ID of the exception
  */
  problemId?: string;
  /**
   * Indicates where the exception was handled at
  */
  handledAt?: string;
  /**
   * The assembly which threw the exception
  */
  assembly?: string;
  /**
   * The method that threw the exception
  */
  method?: string;
  /**
   * The message of the exception
  */
  message?: string;
  /**
   * The type of the exception
  */
  type?: string;
  /**
   * The outer type of the exception
  */
  outerType?: string;
  /**
   * The outer method of the exception
  */
  outerMethod?: string;
  /**
   * The outer assembly of the exception
  */
  outerAssembly?: string;
  /**
   * The outer message of the exception
  */
  outerMessage?: string;
  /**
   * The inner most type of the exception
  */
  innermostType?: string;
  /**
   * The inner most message of the exception
  */
  innermostMessage?: string;
  /**
   * The inner most method of the exception
  */
  innermostMethod?: string;
  /**
   * The inner most assembly of the exception
  */
  innermostAssembly?: string;
  /**
   * The details of the exception
  */
  details?: EventsExceptionDetail[];
}

/**
 * An exception result
*/
export interface EventsExceptionResult extends EventsResultData {
  exception?: EventsExceptionInfo;
}

/**
 * The availability result info
*/
export interface EventsAvailabilityResultInfo {
  /**
   * The name of the availability result
  */
  name?: string;
  /**
   * Indicates if the availability result was successful
  */
  success?: string;
  /**
   * The duration of the availability result
  */
  duration?: number;
  /**
   * The performance bucket of the availability result
  */
  performanceBucket?: string;
  /**
   * The message of the availability result
  */
  message?: string;
  /**
   * The location of the availability result
  */
  location?: string;
  /**
   * The ID of the availability result
  */
  id?: string;
  /**
   * The size of the availability result
  */
  size?: string;
}

/**
 * An availability result result
*/
export interface EventsAvailabilityResultResult extends EventsResultData {
  availabilityResult?: EventsAvailabilityResultInfo;
}

/**
 * The performance counter info
*/
export interface EventsPerformanceCounterInfo {
  /**
   * The value of the performance counter
  */
  value?: number;
  /**
   * The name of the performance counter
  */
  name?: string;
  /**
   * The category of the performance counter
  */
  category?: string;
  /**
   * The counter of the performance counter
  */
  counter?: string;
  /**
   * The instance name of the performance counter
  */
  instanceName?: string;
  /**
   * The instance of the performance counter
  */
  instance?: string;
}

/**
 * A performance counter result
*/
export interface EventsPerformanceCounterResult extends EventsResultData {
  performanceCounter?: EventsPerformanceCounterInfo;
}

/**
 * The custom metric info
*/
export interface EventsCustomMetricInfo {
  /**
   * The name of the custom metric
  */
  name?: string;
  /**
   * The value of the custom metric
  */
  value?: number;
  /**
   * The sum of the custom metric
  */
  valueSum?: number;
  /**
   * The count of the custom metric
  */
  valueCount?: number;
  /**
   * The minimum value of the custom metric
  */
  valueMin?: number;
  /**
   * The maximum value of the custom metric
  */
  valueMax?: number;
  /**
   * The standard deviation of the custom metric
  */
  valueStdDev?: number;
}

/**
 * A custom metric result
*/
export interface EventsCustomMetricResult extends EventsResultData {
  customMetric?: EventsCustomMetricInfo;
}

/**
 * The Analytics query. Learn more about the [Analytics query
 * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
*/
export interface QueryBody {
  /**
   * The query to execute.
  */
  query: string;
  /**
   * Optional. The timespan over which to query data. This is an ISO8601 time period value.  This
   * timespan is applied in addition to any that are specified in the query expression.
  */
  timespan?: string;
  /**
   * A list of Application IDs for cross-application queries.
  */
  applications?: string[];
}

/**
 * @summary A table column.
 * @description A column in a table.
*/
export interface Column {
  /**
   * The name of this column.
  */
  name?: string;
  /**
   * The data type of this column.
  */
  type?: string;
}

/**
 * @summary A query response table.
 * @description Contains the columns and rows for one table in a query response.
*/
export interface Table {
  /**
   * The name of the table.
  */
  name: string;
  /**
   * The list of columns in this table.
  */
  columns: Column[];
  /**
   * The resulting rows from this query.
  */
  rows: any[][];
}

/**
 * @summary A query response.
 * @description Contains the tables, columns & rows resulting from a query.
*/
export interface QueryResults {
  /**
   * The list of tables, columns and rows.
  */
  tables: Table[];
}

/**
 * @summary Error details.
 * @description Contains details when the response code indicates an error.
*/
export interface ErrorResponse {
  /**
   * The error details.
  */
  error: ErrorInfo;
}
