/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * AKS properties
 *
 */
class AKSProperties {
  /**
   * Create a AKSProperties.
   * @member {string} [clusterFqdn] Cluster full qualified domain name
   * @member {array} [systemServices] System services
   * @member {number} [agentCount] Number of agents
   * @member {string} [agentVMSize] Agent virtual machine size
   * @member {object} [sslConfiguration] SSL configuration
   * @member {string} [sslConfiguration.status] Enable or disable ssl for
   * scoring. Possible values include: 'Disabled', 'Enabled'
   * @member {string} [sslConfiguration.cert] Cert data
   * @member {string} [sslConfiguration.key] Key data
   * @member {string} [sslConfiguration.cname] CNAME of the cert
   * @member {object} [aksNetworkingConfiguration] AKS networking configuration
   * for vnet
   * @member {string} [aksNetworkingConfiguration.subnetId] Virtual network
   * subnet resource ID the compute nodes belong to
   * @member {string} [aksNetworkingConfiguration.serviceCidr] A CIDR notation
   * IP range from which to assign service cluster IPs. It must not overlap
   * with any Subnet IP ranges.
   * @member {string} [aksNetworkingConfiguration.dnsServiceIP] An IP address
   * assigned to the Kubernetes DNS service. It must be within the Kubernetes
   * service address range specified in serviceCidr.
   * @member {string} [aksNetworkingConfiguration.dockerBridgeCidr] A CIDR
   * notation IP range assigned to the Docker bridge network. It must not
   * overlap with any Subnet IP ranges or the Kubernetes service address range.
   */
  constructor() {
  }

  /**
   * Defines the metadata of AKSProperties
   *
   * @returns {object} metadata of AKSProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AKS_properties',
      type: {
        name: 'Composite',
        className: 'AKSProperties',
        modelProperties: {
          clusterFqdn: {
            required: false,
            serializedName: 'clusterFqdn',
            type: {
              name: 'String'
            }
          },
          systemServices: {
            required: false,
            readOnly: true,
            serializedName: 'systemServices',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SystemServiceElementType',
                  type: {
                    name: 'Composite',
                    className: 'SystemService'
                  }
              }
            }
          },
          agentCount: {
            required: false,
            serializedName: 'agentCount',
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          agentVMSize: {
            required: false,
            serializedName: 'agentVMSize',
            type: {
              name: 'String'
            }
          },
          sslConfiguration: {
            required: false,
            serializedName: 'sslConfiguration',
            type: {
              name: 'Composite',
              className: 'SslConfiguration'
            }
          },
          aksNetworkingConfiguration: {
            required: false,
            serializedName: 'aksNetworkingConfiguration',
            type: {
              name: 'Composite',
              className: 'AksNetworkingConfiguration'
            }
          }
        }
      }
    };
  }
}

module.exports = AKSProperties;
