/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An Azure Machine Learning compute.
 *
 * @extends models['Compute']
 */
class AmlCompute extends models['Compute'] {
  /**
   * Create a AmlCompute.
   * @member {object} [properties] AML Compute properties
   * @member {string} [properties.vmSize] Virtual Machine Size
   * @member {string} [properties.vmPriority] Virtual Machine priority.
   * Possible values include: 'Dedicated', 'LowPriority'
   * @member {object} [properties.scaleSettings] Scale settings for AML Compute
   * @member {number} [properties.scaleSettings.maxNodeCount] Max number of
   * nodes to use
   * @member {number} [properties.scaleSettings.minNodeCount] Min number of
   * nodes to use
   * @member {moment.duration}
   * [properties.scaleSettings.nodeIdleTimeBeforeScaleDown] Node Idle Time
   * before scaling down amlCompute
   * @member {object} [properties.userAccountCredentials] Credentials for an
   * administrator user account that will be created on each compute node.
   * @member {string} [properties.userAccountCredentials.adminUserName] Name of
   * the administrator user account which can be used to SSH to nodes.
   * @member {string} [properties.userAccountCredentials.adminUserSshPublicKey]
   * SSH public key of the administrator user account.
   * @member {string} [properties.userAccountCredentials.adminUserPassword]
   * Password of the administrator user account.
   * @member {object} [properties.subnet] Virtual network subnet resource ID
   * the compute nodes belong to.
   * @member {string} [properties.subnet.id] The ID of the resource
   * @member {string} [properties.allocationState] Allocation state of the
   * compute. Possible values are: steady - Indicates that the compute is not
   * resizing. There are no changes to the number of compute nodes in the
   * compute in progress. A compute enters this state when it is created and
   * when no operations are being performed on the compute to change the number
   * of compute nodes. resizing - Indicates that the compute is resizing; that
   * is, compute nodes are being added to or removed from the compute. Possible
   * values include: 'Steady', 'Resizing'
   * @member {date} [properties.allocationStateTransitionTime] The time at
   * which the compute entered its current allocation state.
   * @member {array} [properties.errors] Collection of errors encountered by
   * various compute nodes during node setup.
   * @member {number} [properties.currentNodeCount] The number of compute nodes
   * currently assigned to the compute.
   * @member {number} [properties.targetNodeCount] The target number of compute
   * nodes for the compute. If the allocationState is resizing, this property
   * denotes the target node count for the ongoing resize operation. If the
   * allocationState is steady, this property denotes the target node count for
   * the previous resize operation.
   * @member {object} [properties.nodeStateCounts] Counts of various node
   * states on the compute.
   * @member {number} [properties.nodeStateCounts.idleNodeCount] Number of
   * compute nodes in idle state.
   * @member {number} [properties.nodeStateCounts.runningNodeCount] Number of
   * compute nodes which are running jobs.
   * @member {number} [properties.nodeStateCounts.preparingNodeCount] Number of
   * compute nodes which are being prepared.
   * @member {number} [properties.nodeStateCounts.unusableNodeCount] Number of
   * compute nodes which are in unusable state.
   * @member {number} [properties.nodeStateCounts.leavingNodeCount] Number of
   * compute nodes which are leaving the amlCompute.
   * @member {number} [properties.nodeStateCounts.preemptedNodeCount] Number of
   * compute nodes which are in preempted state.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of AmlCompute
   *
   * @returns {object} metadata of AmlCompute
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AmlCompute',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'computeType',
          clientName: 'computeType'
        },
        uberParent: 'Compute',
        className: 'AmlCompute',
        modelProperties: {
          computeLocation: {
            required: false,
            serializedName: 'computeLocation',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'provisioningState',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          createdOn: {
            required: false,
            readOnly: true,
            serializedName: 'createdOn',
            type: {
              name: 'DateTime'
            }
          },
          modifiedOn: {
            required: false,
            readOnly: true,
            serializedName: 'modifiedOn',
            type: {
              name: 'DateTime'
            }
          },
          resourceId: {
            required: false,
            serializedName: 'resourceId',
            type: {
              name: 'String'
            }
          },
          provisioningErrors: {
            required: false,
            readOnly: true,
            serializedName: 'provisioningErrors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MachineLearningServiceErrorElementType',
                  type: {
                    name: 'Composite',
                    className: 'MachineLearningServiceError'
                  }
              }
            }
          },
          isAttachedCompute: {
            required: false,
            readOnly: true,
            serializedName: 'isAttachedCompute',
            type: {
              name: 'Boolean'
            }
          },
          computeType: {
            required: true,
            serializedName: 'computeType',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          properties: {
            required: false,
            serializedName: 'properties',
            type: {
              name: 'Composite',
              className: 'AmlComputeProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = AmlCompute;
