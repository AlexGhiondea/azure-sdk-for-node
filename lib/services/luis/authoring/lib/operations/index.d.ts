/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Features
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LUISAuthoringClient.
 */
export interface Features {


    /**
     * Creates a new phraselist feature.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} phraselistCreateObject A Phraselist object containing Name,
     * comma-separated Phrases and the isExchangeable boolean. Default value for
     * isExchangeable is true.
     *
     * @param {string} [phraselistCreateObject.phrases] List of comma-separated
     * phrases that represent the Phraselist.
     *
     * @param {string} [phraselistCreateObject.name] The Phraselist name.
     *
     * @param {boolean} [phraselistCreateObject.isExchangeable] An exchangeable
     * phrase list feature serves as a single feature to the LUIS underlying
     * training algorithm. It is used as a lexicon lookup feature where its value
     * is 1 if the lexicon contains a given word or 0 if it doesn’t. Think of an
     * exchangeable as a synonyms list. A non-exchangeable phrase list feature has
     * all the phrases in the list serve as separate features to the underlying
     * training algorithm. So, if you your phrase list feature contains 5 phrases,
     * they will be mapped to 5 separate features. You can think of the
     * non-exchangeable phrase list feature as an additional bag of words that you
     * are willing to add to LUIS existing vocabulary features. Think of a
     * non-exchangeable as set of different words. Default value is true.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addPhraseListWithHttpOperationResponse(appId: string, versionId: string, phraselistCreateObject: models.PhraselistCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a new phraselist feature.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} phraselistCreateObject A Phraselist object containing Name,
     * comma-separated Phrases and the isExchangeable boolean. Default value for
     * isExchangeable is true.
     *
     * @param {string} [phraselistCreateObject.phrases] List of comma-separated
     * phrases that represent the Phraselist.
     *
     * @param {string} [phraselistCreateObject.name] The Phraselist name.
     *
     * @param {boolean} [phraselistCreateObject.isExchangeable] An exchangeable
     * phrase list feature serves as a single feature to the LUIS underlying
     * training algorithm. It is used as a lexicon lookup feature where its value
     * is 1 if the lexicon contains a given word or 0 if it doesn’t. Think of an
     * exchangeable as a synonyms list. A non-exchangeable phrase list feature has
     * all the phrases in the list serve as separate features to the underlying
     * training algorithm. So, if you your phrase list feature contains 5 phrases,
     * they will be mapped to 5 separate features. You can think of the
     * non-exchangeable phrase list feature as an additional bag of words that you
     * are willing to add to LUIS existing vocabulary features. Think of a
     * non-exchangeable as set of different words. Default value is true.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addPhraseList(appId: string, versionId: string, phraselistCreateObject: models.PhraselistCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addPhraseList(appId: string, versionId: string, phraselistCreateObject: models.PhraselistCreateObject, callback: ServiceCallback<any>): void;
    addPhraseList(appId: string, versionId: string, phraselistCreateObject: models.PhraselistCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets all the phraselist features.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPhraseListsWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets all the phraselist features.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPhraseLists(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listPhraseLists(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listPhraseLists(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets all the extraction features for the specified application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets all the extraction features for the specified application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    list(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets phraselist feature info.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} phraselistId The ID of the feature to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPhraseListWithHttpOperationResponse(appId: string, versionId: string, phraselistId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets phraselist feature info.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} phraselistId The ID of the feature to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPhraseList(appId: string, versionId: string, phraselistId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getPhraseList(appId: string, versionId: string, phraselistId: number, callback: ServiceCallback<any>): void;
    getPhraseList(appId: string, versionId: string, phraselistId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the phrases, the state and the name of the phraselist feature.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} phraselistId The ID of the feature to be updated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.phraselistUpdateObject] The new values for: - Just
     * a boolean called IsActive, in which case the status of the feature will be
     * changed. - Name, Pattern, Mode, and a boolean called IsActive to update the
     * feature.
     *
     * @param {string} [options.phraselistUpdateObject.phrases] List of
     * comma-separated phrases that represent the Phraselist.
     *
     * @param {string} [options.phraselistUpdateObject.name] The Phraselist name.
     *
     * @param {boolean} [options.phraselistUpdateObject.isActive] Indicates if the
     * Phraselist is enabled.
     *
     * @param {boolean} [options.phraselistUpdateObject.isExchangeable] An
     * exchangeable phrase list feature are serves as single feature to the LUIS
     * underlying training algorithm. It is used as a lexicon lookup feature where
     * its value is 1 if the lexicon contains a given word or 0 if it doesn’t.
     * Think of an exchangeable as a synonyms list. A non-exchangeable phrase list
     * feature has all the phrases in the list serve as separate features to the
     * underlying training algorithm. So, if you your phrase list feature contains
     * 5 phrases, they will be mapped to 5 separate features. You can think of the
     * non-exchangeable phrase list feature as an additional bag of words that you
     * are willing to add to LUIS existing vocabulary features. Think of a
     * non-exchangeable as set of different words. Default value is true.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePhraseListWithHttpOperationResponse(appId: string, versionId: string, phraselistId: number, options?: { phraselistUpdateObject? : models.PhraselistUpdateObject, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the phrases, the state and the name of the phraselist feature.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} phraselistId The ID of the feature to be updated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.phraselistUpdateObject] The new values for: - Just
     * a boolean called IsActive, in which case the status of the feature will be
     * changed. - Name, Pattern, Mode, and a boolean called IsActive to update the
     * feature.
     *
     * @param {string} [options.phraselistUpdateObject.phrases] List of
     * comma-separated phrases that represent the Phraselist.
     *
     * @param {string} [options.phraselistUpdateObject.name] The Phraselist name.
     *
     * @param {boolean} [options.phraselistUpdateObject.isActive] Indicates if the
     * Phraselist is enabled.
     *
     * @param {boolean} [options.phraselistUpdateObject.isExchangeable] An
     * exchangeable phrase list feature are serves as single feature to the LUIS
     * underlying training algorithm. It is used as a lexicon lookup feature where
     * its value is 1 if the lexicon contains a given word or 0 if it doesn’t.
     * Think of an exchangeable as a synonyms list. A non-exchangeable phrase list
     * feature has all the phrases in the list serve as separate features to the
     * underlying training algorithm. So, if you your phrase list feature contains
     * 5 phrases, they will be mapped to 5 separate features. You can think of the
     * non-exchangeable phrase list feature as an additional bag of words that you
     * are willing to add to LUIS existing vocabulary features. Think of a
     * non-exchangeable as set of different words. Default value is true.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePhraseList(appId: string, versionId: string, phraselistId: number, options?: { phraselistUpdateObject? : models.PhraselistUpdateObject, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updatePhraseList(appId: string, versionId: string, phraselistId: number, callback: ServiceCallback<any>): void;
    updatePhraseList(appId: string, versionId: string, phraselistId: number, options: { phraselistUpdateObject? : models.PhraselistUpdateObject, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a phraselist feature.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} phraselistId The ID of the feature to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePhraseListWithHttpOperationResponse(appId: string, versionId: string, phraselistId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a phraselist feature.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} phraselistId The ID of the feature to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePhraseList(appId: string, versionId: string, phraselistId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deletePhraseList(appId: string, versionId: string, phraselistId: number, callback: ServiceCallback<any>): void;
    deletePhraseList(appId: string, versionId: string, phraselistId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Examples
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LUISAuthoringClient.
 */
export interface Examples {


    /**
     * Adds a labeled example to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} exampleLabelObject An example label with the expected intent
     * and entities.
     *
     * @param {string} [exampleLabelObject.text] The sample's utterance.
     *
     * @param {array} [exampleLabelObject.entityLabels] The identified entities
     * within the utterance.
     *
     * @param {string} [exampleLabelObject.intentName] The identified intent
     * representing the utterance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addWithHttpOperationResponse(appId: string, versionId: string, exampleLabelObject: models.ExampleLabelObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a labeled example to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} exampleLabelObject An example label with the expected intent
     * and entities.
     *
     * @param {string} [exampleLabelObject.text] The sample's utterance.
     *
     * @param {array} [exampleLabelObject.entityLabels] The identified entities
     * within the utterance.
     *
     * @param {string} [exampleLabelObject.intentName] The identified intent
     * representing the utterance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    add(appId: string, versionId: string, exampleLabelObject: models.ExampleLabelObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    add(appId: string, versionId: string, exampleLabelObject: models.ExampleLabelObject, callback: ServiceCallback<any>): void;
    add(appId: string, versionId: string, exampleLabelObject: models.ExampleLabelObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a batch of labeled examples to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {array} exampleLabelObjectArray Array of examples.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    batchWithHttpOperationResponse(appId: string, versionId: string, exampleLabelObjectArray: models.ExampleLabelObject[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a batch of labeled examples to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {array} exampleLabelObjectArray Array of examples.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    batch(appId: string, versionId: string, exampleLabelObjectArray: models.ExampleLabelObject[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    batch(appId: string, versionId: string, exampleLabelObjectArray: models.ExampleLabelObject[], callback: ServiceCallback<any>): void;
    batch(appId: string, versionId: string, exampleLabelObjectArray: models.ExampleLabelObject[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns examples to be reviewed.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns examples to be reviewed.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    list(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes the labeled example with the specified ID.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} exampleId The example ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(appId: string, versionId: string, exampleId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes the labeled example with the specified ID.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} exampleId The example ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(appId: string, versionId: string, exampleId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteMethod(appId: string, versionId: string, exampleId: number, callback: ServiceCallback<any>): void;
    deleteMethod(appId: string, versionId: string, exampleId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Model
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LUISAuthoringClient.
 */
export interface Model {


    /**
     * Adds an intent classifier to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} intentCreateObject A model object containing the name of the
     * new intent classifier.
     *
     * @param {string} [intentCreateObject.name] Name of the new entity extractor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addIntentWithHttpOperationResponse(appId: string, versionId: string, intentCreateObject: models.ModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds an intent classifier to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} intentCreateObject A model object containing the name of the
     * new intent classifier.
     *
     * @param {string} [intentCreateObject.name] Name of the new entity extractor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addIntent(appId: string, versionId: string, intentCreateObject: models.ModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addIntent(appId: string, versionId: string, intentCreateObject: models.ModelCreateObject, callback: ServiceCallback<any>): void;
    addIntent(appId: string, versionId: string, intentCreateObject: models.ModelCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the intent models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listIntentsWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the intent models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listIntents(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listIntents(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listIntents(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds an entity extractor to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} modelCreateObject A model object containing the name for the
     * new entity extractor.
     *
     * @param {string} [modelCreateObject.name] Name of the new entity extractor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addEntityWithHttpOperationResponse(appId: string, versionId: string, modelCreateObject: models.ModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds an entity extractor to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} modelCreateObject A model object containing the name for the
     * new entity extractor.
     *
     * @param {string} [modelCreateObject.name] Name of the new entity extractor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addEntity(appId: string, versionId: string, modelCreateObject: models.ModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addEntity(appId: string, versionId: string, modelCreateObject: models.ModelCreateObject, callback: ServiceCallback<any>): void;
    addEntity(appId: string, versionId: string, modelCreateObject: models.ModelCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listEntitiesWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listEntities(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listEntities(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listEntities(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a hierarchical entity extractor to the application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} hierarchicalModelCreateObject A model containing the name
     * and children of the new entity extractor.
     *
     * @param {array} [hierarchicalModelCreateObject.children] Child entities.
     *
     * @param {string} [hierarchicalModelCreateObject.name] Entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addHierarchicalEntityWithHttpOperationResponse(appId: string, versionId: string, hierarchicalModelCreateObject: models.HierarchicalEntityModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a hierarchical entity extractor to the application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} hierarchicalModelCreateObject A model containing the name
     * and children of the new entity extractor.
     *
     * @param {array} [hierarchicalModelCreateObject.children] Child entities.
     *
     * @param {string} [hierarchicalModelCreateObject.name] Entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addHierarchicalEntity(appId: string, versionId: string, hierarchicalModelCreateObject: models.HierarchicalEntityModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addHierarchicalEntity(appId: string, versionId: string, hierarchicalModelCreateObject: models.HierarchicalEntityModel, callback: ServiceCallback<any>): void;
    addHierarchicalEntity(appId: string, versionId: string, hierarchicalModelCreateObject: models.HierarchicalEntityModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the hierarchical entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHierarchicalEntitiesWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the hierarchical entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHierarchicalEntities(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listHierarchicalEntities(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listHierarchicalEntities(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a composite entity extractor to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} compositeModelCreateObject A model containing the name and
     * children of the new entity extractor.
     *
     * @param {array} [compositeModelCreateObject.children] Child entities.
     *
     * @param {string} [compositeModelCreateObject.name] Entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addCompositeEntityWithHttpOperationResponse(appId: string, versionId: string, compositeModelCreateObject: models.CompositeEntityModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a composite entity extractor to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} compositeModelCreateObject A model containing the name and
     * children of the new entity extractor.
     *
     * @param {array} [compositeModelCreateObject.children] Child entities.
     *
     * @param {string} [compositeModelCreateObject.name] Entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addCompositeEntity(appId: string, versionId: string, compositeModelCreateObject: models.CompositeEntityModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addCompositeEntity(appId: string, versionId: string, compositeModelCreateObject: models.CompositeEntityModel, callback: ServiceCallback<any>): void;
    addCompositeEntity(appId: string, versionId: string, compositeModelCreateObject: models.CompositeEntityModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the composite entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCompositeEntitiesWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the composite entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCompositeEntities(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listCompositeEntities(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listCompositeEntities(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the closedlist models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listClosedListsWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the closedlist models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listClosedLists(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listClosedLists(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listClosedLists(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a closed list model to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} closedListModelCreateObject A model containing the name and
     * words for the new closed list entity extractor.
     *
     * @param {array} [closedListModelCreateObject.subLists] Sublists for the
     * feature.
     *
     * @param {string} [closedListModelCreateObject.name] Name of the closed list
     * feature.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addClosedListWithHttpOperationResponse(appId: string, versionId: string, closedListModelCreateObject: models.ClosedListModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a closed list model to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} closedListModelCreateObject A model containing the name and
     * words for the new closed list entity extractor.
     *
     * @param {array} [closedListModelCreateObject.subLists] Sublists for the
     * feature.
     *
     * @param {string} [closedListModelCreateObject.name] Name of the closed list
     * feature.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addClosedList(appId: string, versionId: string, closedListModelCreateObject: models.ClosedListModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addClosedList(appId: string, versionId: string, closedListModelCreateObject: models.ClosedListModelCreateObject, callback: ServiceCallback<any>): void;
    addClosedList(appId: string, versionId: string, closedListModelCreateObject: models.ClosedListModelCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a list of prebuilt entity extractors to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {array} prebuiltExtractorNames An array of prebuilt entity extractor
     * names.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addPrebuiltWithHttpOperationResponse(appId: string, versionId: string, prebuiltExtractorNames: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a list of prebuilt entity extractors to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {array} prebuiltExtractorNames An array of prebuilt entity extractor
     * names.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addPrebuilt(appId: string, versionId: string, prebuiltExtractorNames: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addPrebuilt(appId: string, versionId: string, prebuiltExtractorNames: string[], callback: ServiceCallback<any>): void;
    addPrebuilt(appId: string, versionId: string, prebuiltExtractorNames: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the prebuilt entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPrebuiltsWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the prebuilt entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPrebuilts(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listPrebuilts(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listPrebuilts(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets all the available prebuilt entity extractors for the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPrebuiltEntitiesWithHttpOperationResponse(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets all the available prebuilt entity extractors for the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPrebuiltEntities(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listPrebuiltEntities(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listPrebuiltEntities(appId: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the application version models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listModelsWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the application version models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listModels(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listModels(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listModels(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the utterances for the given model in the given app version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {string} modelId The ID (GUID) of the model.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    examplesMethodWithHttpOperationResponse(appId: string, versionId: string, modelId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the utterances for the given model in the given app version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {string} modelId The ID (GUID) of the model.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    examplesMethod(appId: string, versionId: string, modelId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    examplesMethod(appId: string, versionId: string, modelId: string, callback: ServiceCallback<any>): void;
    examplesMethod(appId: string, versionId: string, modelId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the intent model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} intentId The intent classifier ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getIntentWithHttpOperationResponse(appId: string, versionId: string, intentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the intent model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} intentId The intent classifier ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getIntent(appId: string, versionId: string, intentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getIntent(appId: string, versionId: string, intentId: string, callback: ServiceCallback<any>): void;
    getIntent(appId: string, versionId: string, intentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the name of an intent classifier.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} intentId The intent classifier ID.
     *
     * @param {object} modelUpdateObject A model object containing the new intent
     * classifier name.
     *
     * @param {string} [modelUpdateObject.name] The entity's new name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateIntentWithHttpOperationResponse(appId: string, versionId: string, intentId: string, modelUpdateObject: models.ModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the name of an intent classifier.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} intentId The intent classifier ID.
     *
     * @param {object} modelUpdateObject A model object containing the new intent
     * classifier name.
     *
     * @param {string} [modelUpdateObject.name] The entity's new name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateIntent(appId: string, versionId: string, intentId: string, modelUpdateObject: models.ModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateIntent(appId: string, versionId: string, intentId: string, modelUpdateObject: models.ModelUpdateObject, callback: ServiceCallback<any>): void;
    updateIntent(appId: string, versionId: string, intentId: string, modelUpdateObject: models.ModelUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes an intent classifier from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} intentId The intent classifier ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteUtterances] Also delete the intent's
     * utterances (true). Or move the utterances to the None intent (false - the
     * default value).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteIntentWithHttpOperationResponse(appId: string, versionId: string, intentId: string, options?: { deleteUtterances? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes an intent classifier from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} intentId The intent classifier ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteUtterances] Also delete the intent's
     * utterances (true). Or move the utterances to the None intent (false - the
     * default value).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteIntent(appId: string, versionId: string, intentId: string, options?: { deleteUtterances? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteIntent(appId: string, versionId: string, intentId: string, callback: ServiceCallback<any>): void;
    deleteIntent(appId: string, versionId: string, intentId: string, options: { deleteUtterances? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntity(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getEntity(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    getEntity(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the name of an entity extractor.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity extractor ID.
     *
     * @param {object} modelUpdateObject A model object containing the new entity
     * extractor name.
     *
     * @param {string} [modelUpdateObject.name] The entity's new name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateEntityWithHttpOperationResponse(appId: string, versionId: string, entityId: string, modelUpdateObject: models.ModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the name of an entity extractor.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity extractor ID.
     *
     * @param {object} modelUpdateObject A model object containing the new entity
     * extractor name.
     *
     * @param {string} [modelUpdateObject.name] The entity's new name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateEntity(appId: string, versionId: string, entityId: string, modelUpdateObject: models.ModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateEntity(appId: string, versionId: string, entityId: string, modelUpdateObject: models.ModelUpdateObject, callback: ServiceCallback<any>): void;
    updateEntity(appId: string, versionId: string, entityId: string, modelUpdateObject: models.ModelUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes an entity extractor from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteEntityWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes an entity extractor from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteEntity(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteEntity(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    deleteEntity(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the hierarchical entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHierarchicalEntityWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the hierarchical entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getHierarchicalEntity(appId: string, versionId: string, hEntityId: string, callback: ServiceCallback<any>): void;
    getHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the name and children of a hierarchical entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} hierarchicalModelUpdateObject Model containing names of the
     * children of the hierarchical entity.
     *
     * @param {array} [hierarchicalModelUpdateObject.children] Child entities.
     *
     * @param {string} [hierarchicalModelUpdateObject.name] Entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateHierarchicalEntityWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, hierarchicalModelUpdateObject: models.HierarchicalEntityModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the name and children of a hierarchical entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} hierarchicalModelUpdateObject Model containing names of the
     * children of the hierarchical entity.
     *
     * @param {array} [hierarchicalModelUpdateObject.children] Child entities.
     *
     * @param {string} [hierarchicalModelUpdateObject.name] Entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateHierarchicalEntity(appId: string, versionId: string, hEntityId: string, hierarchicalModelUpdateObject: models.HierarchicalEntityModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateHierarchicalEntity(appId: string, versionId: string, hEntityId: string, hierarchicalModelUpdateObject: models.HierarchicalEntityModel, callback: ServiceCallback<any>): void;
    updateHierarchicalEntity(appId: string, versionId: string, hEntityId: string, hierarchicalModelUpdateObject: models.HierarchicalEntityModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a hierarchical entity extractor from the application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteHierarchicalEntityWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a hierarchical entity extractor from the application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteHierarchicalEntity(appId: string, versionId: string, hEntityId: string, callback: ServiceCallback<any>): void;
    deleteHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the composite entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCompositeEntityWithHttpOperationResponse(appId: string, versionId: string, cEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the composite entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCompositeEntity(appId: string, versionId: string, cEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getCompositeEntity(appId: string, versionId: string, cEntityId: string, callback: ServiceCallback<any>): void;
    getCompositeEntity(appId: string, versionId: string, cEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the composite entity extractor.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} compositeModelUpdateObject A model object containing the new
     * entity extractor name and children.
     *
     * @param {array} [compositeModelUpdateObject.children] Child entities.
     *
     * @param {string} [compositeModelUpdateObject.name] Entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateCompositeEntityWithHttpOperationResponse(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: models.CompositeEntityModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the composite entity extractor.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} compositeModelUpdateObject A model object containing the new
     * entity extractor name and children.
     *
     * @param {array} [compositeModelUpdateObject.children] Child entities.
     *
     * @param {string} [compositeModelUpdateObject.name] Entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateCompositeEntity(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: models.CompositeEntityModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateCompositeEntity(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: models.CompositeEntityModel, callback: ServiceCallback<any>): void;
    updateCompositeEntity(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: models.CompositeEntityModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a composite entity extractor from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteCompositeEntityWithHttpOperationResponse(appId: string, versionId: string, cEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a composite entity extractor from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteCompositeEntity(appId: string, versionId: string, cEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteCompositeEntity(appId: string, versionId: string, cEntityId: string, callback: ServiceCallback<any>): void;
    deleteCompositeEntity(appId: string, versionId: string, cEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information of a closed list model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list model ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getClosedListWithHttpOperationResponse(appId: string, versionId: string, clEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information of a closed list model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list model ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getClosedList(appId: string, versionId: string, clEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getClosedList(appId: string, versionId: string, clEntityId: string, callback: ServiceCallback<any>): void;
    getClosedList(appId: string, versionId: string, clEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the closed list model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list model ID.
     *
     * @param {object} closedListModelUpdateObject The new entity name and words
     * list.
     *
     * @param {array} [closedListModelUpdateObject.subLists] The new sublists for
     * the feature.
     *
     * @param {string} [closedListModelUpdateObject.name] The new name of the
     * closed list feature.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateClosedListWithHttpOperationResponse(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: models.ClosedListModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the closed list model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list model ID.
     *
     * @param {object} closedListModelUpdateObject The new entity name and words
     * list.
     *
     * @param {array} [closedListModelUpdateObject.subLists] The new sublists for
     * the feature.
     *
     * @param {string} [closedListModelUpdateObject.name] The new name of the
     * closed list feature.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateClosedList(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: models.ClosedListModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateClosedList(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: models.ClosedListModelUpdateObject, callback: ServiceCallback<any>): void;
    updateClosedList(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: models.ClosedListModelUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list model ID.
     *
     * @param {object} closedListModelPatchObject A words list batch.
     *
     * @param {array} [closedListModelPatchObject.subLists] Sublists to add.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchClosedListWithHttpOperationResponse(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: models.ClosedListModelPatchObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list model ID.
     *
     * @param {object} closedListModelPatchObject A words list batch.
     *
     * @param {array} [closedListModelPatchObject.subLists] Sublists to add.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patchClosedList(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: models.ClosedListModelPatchObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    patchClosedList(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: models.ClosedListModelPatchObject, callback: ServiceCallback<any>): void;
    patchClosedList(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: models.ClosedListModelPatchObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a closed list model from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list model ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteClosedListWithHttpOperationResponse(appId: string, versionId: string, clEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a closed list model from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list model ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteClosedList(appId: string, versionId: string, clEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteClosedList(appId: string, versionId: string, clEntityId: string, callback: ServiceCallback<any>): void;
    deleteClosedList(appId: string, versionId: string, clEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the prebuilt entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} prebuiltId The prebuilt entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPrebuiltWithHttpOperationResponse(appId: string, versionId: string, prebuiltId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the prebuilt entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} prebuiltId The prebuilt entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPrebuilt(appId: string, versionId: string, prebuiltId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getPrebuilt(appId: string, versionId: string, prebuiltId: string, callback: ServiceCallback<any>): void;
    getPrebuilt(appId: string, versionId: string, prebuiltId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a prebuilt entity extractor from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} prebuiltId The prebuilt entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePrebuiltWithHttpOperationResponse(appId: string, versionId: string, prebuiltId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a prebuilt entity extractor from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} prebuiltId The prebuilt entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePrebuilt(appId: string, versionId: string, prebuiltId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deletePrebuilt(appId: string, versionId: string, prebuiltId: string, callback: ServiceCallback<any>): void;
    deletePrebuilt(appId: string, versionId: string, prebuiltId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a sublist of a specific closed list model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list entity extractor ID.
     *
     * @param {number} subListId The sublist ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteSubListWithHttpOperationResponse(appId: string, versionId: string, clEntityId: string, subListId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a sublist of a specific closed list model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list entity extractor ID.
     *
     * @param {number} subListId The sublist ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteSubList(appId: string, versionId: string, clEntityId: string, subListId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteSubList(appId: string, versionId: string, clEntityId: string, subListId: number, callback: ServiceCallback<any>): void;
    deleteSubList(appId: string, versionId: string, clEntityId: string, subListId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates one of the closed list's sublists.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list entity extractor ID.
     *
     * @param {number} subListId The sublist ID.
     *
     * @param {object} wordListBaseUpdateObject A sublist update object containing
     * the new canonical form and the list of words.
     *
     * @param {string} [wordListBaseUpdateObject.canonicalForm] The standard form
     * that the list represents.
     *
     * @param {array} [wordListBaseUpdateObject.list] List of synonym words.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSubListWithHttpOperationResponse(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: models.WordListBaseUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates one of the closed list's sublists.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list entity extractor ID.
     *
     * @param {number} subListId The sublist ID.
     *
     * @param {object} wordListBaseUpdateObject A sublist update object containing
     * the new canonical form and the list of words.
     *
     * @param {string} [wordListBaseUpdateObject.canonicalForm] The standard form
     * that the list represents.
     *
     * @param {array} [wordListBaseUpdateObject.list] List of synonym words.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSubList(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: models.WordListBaseUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateSubList(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: models.WordListBaseUpdateObject, callback: ServiceCallback<any>): void;
    updateSubList(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: models.WordListBaseUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} intentId The intent classifier ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getIntentSuggestionsWithHttpOperationResponse(appId: string, versionId: string, intentId: string, options?: { take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} intentId The intent classifier ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getIntentSuggestions(appId: string, versionId: string, intentId: string, options?: { take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getIntentSuggestions(appId: string, versionId: string, intentId: string, callback: ServiceCallback<any>): void;
    getIntentSuggestions(appId: string, versionId: string, intentId: string, options: { take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The target entity extractor model to enhance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntitySuggestionsWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The target entity extractor model to enhance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntitySuggestions(appId: string, versionId: string, entityId: string, options?: { take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getEntitySuggestions(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    getEntitySuggestions(appId: string, versionId: string, entityId: string, options: { take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a list to an existing closed list.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list entity extractor ID.
     *
     * @param {object} wordListCreateObject Words list.
     *
     * @param {string} [wordListCreateObject.canonicalForm] The standard form that
     * the list represents.
     *
     * @param {array} [wordListCreateObject.list] List of synonym words.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addSubListWithHttpOperationResponse(appId: string, versionId: string, clEntityId: string, wordListCreateObject: models.WordListObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a list to an existing closed list.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} clEntityId The closed list entity extractor ID.
     *
     * @param {object} wordListCreateObject Words list.
     *
     * @param {string} [wordListCreateObject.canonicalForm] The standard form that
     * the list represents.
     *
     * @param {array} [wordListCreateObject.list] List of synonym words.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addSubList(appId: string, versionId: string, clEntityId: string, wordListCreateObject: models.WordListObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addSubList(appId: string, versionId: string, clEntityId: string, wordListCreateObject: models.WordListObject, callback: ServiceCallback<any>): void;
    addSubList(appId: string, versionId: string, clEntityId: string, wordListCreateObject: models.WordListObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a customizable prebuilt domain along with all of its models to this
     * application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} prebuiltDomainObject A prebuilt domain create object
     * containing the name of the domain.
     *
     * @param {string} [prebuiltDomainObject.domainName] The domain name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addCustomPrebuiltDomainWithHttpOperationResponse(appId: string, versionId: string, prebuiltDomainObject: models.PrebuiltDomainCreateBaseObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a customizable prebuilt domain along with all of its models to this
     * application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} prebuiltDomainObject A prebuilt domain create object
     * containing the name of the domain.
     *
     * @param {string} [prebuiltDomainObject.domainName] The domain name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addCustomPrebuiltDomain(appId: string, versionId: string, prebuiltDomainObject: models.PrebuiltDomainCreateBaseObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addCustomPrebuiltDomain(appId: string, versionId: string, prebuiltDomainObject: models.PrebuiltDomainCreateBaseObject, callback: ServiceCallback<any>): void;
    addCustomPrebuiltDomain(appId: string, versionId: string, prebuiltDomainObject: models.PrebuiltDomainCreateBaseObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a custom prebuilt intent model to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} prebuiltDomainModelCreateObject A model object containing
     * the name of the custom prebuilt intent and the name of the domain to which
     * this model belongs.
     *
     * @param {string} [prebuiltDomainModelCreateObject.domainName] The domain
     * name.
     *
     * @param {string} [prebuiltDomainModelCreateObject.modelName] The intent name
     * or entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addCustomPrebuiltIntentWithHttpOperationResponse(appId: string, versionId: string, prebuiltDomainModelCreateObject: models.PrebuiltDomainModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a custom prebuilt intent model to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} prebuiltDomainModelCreateObject A model object containing
     * the name of the custom prebuilt intent and the name of the domain to which
     * this model belongs.
     *
     * @param {string} [prebuiltDomainModelCreateObject.domainName] The domain
     * name.
     *
     * @param {string} [prebuiltDomainModelCreateObject.modelName] The intent name
     * or entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addCustomPrebuiltIntent(appId: string, versionId: string, prebuiltDomainModelCreateObject: models.PrebuiltDomainModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addCustomPrebuiltIntent(appId: string, versionId: string, prebuiltDomainModelCreateObject: models.PrebuiltDomainModelCreateObject, callback: ServiceCallback<any>): void;
    addCustomPrebuiltIntent(appId: string, versionId: string, prebuiltDomainModelCreateObject: models.PrebuiltDomainModelCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets custom prebuilt intents information of this application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCustomPrebuiltIntentsWithHttpOperationResponse(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets custom prebuilt intents information of this application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCustomPrebuiltIntents(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listCustomPrebuiltIntents(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listCustomPrebuiltIntents(appId: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a custom prebuilt entity model to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} prebuiltDomainModelCreateObject A model object containing
     * the name of the custom prebuilt entity and the name of the domain to which
     * this model belongs.
     *
     * @param {string} [prebuiltDomainModelCreateObject.domainName] The domain
     * name.
     *
     * @param {string} [prebuiltDomainModelCreateObject.modelName] The intent name
     * or entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addCustomPrebuiltEntityWithHttpOperationResponse(appId: string, versionId: string, prebuiltDomainModelCreateObject: models.PrebuiltDomainModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a custom prebuilt entity model to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} prebuiltDomainModelCreateObject A model object containing
     * the name of the custom prebuilt entity and the name of the domain to which
     * this model belongs.
     *
     * @param {string} [prebuiltDomainModelCreateObject.domainName] The domain
     * name.
     *
     * @param {string} [prebuiltDomainModelCreateObject.modelName] The intent name
     * or entity name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addCustomPrebuiltEntity(appId: string, versionId: string, prebuiltDomainModelCreateObject: models.PrebuiltDomainModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addCustomPrebuiltEntity(appId: string, versionId: string, prebuiltDomainModelCreateObject: models.PrebuiltDomainModelCreateObject, callback: ServiceCallback<any>): void;
    addCustomPrebuiltEntity(appId: string, versionId: string, prebuiltDomainModelCreateObject: models.PrebuiltDomainModelCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets all custom prebuilt entities information of this application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCustomPrebuiltEntitiesWithHttpOperationResponse(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets all custom prebuilt entities information of this application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCustomPrebuiltEntities(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listCustomPrebuiltEntities(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listCustomPrebuiltEntities(appId: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets all custom prebuilt models information of this application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCustomPrebuiltModelsWithHttpOperationResponse(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets all custom prebuilt models information of this application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCustomPrebuiltModels(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listCustomPrebuiltModels(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    listCustomPrebuiltModels(appId: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a prebuilt domain's models from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {string} domainName Domain name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteCustomPrebuiltDomainWithHttpOperationResponse(appId: string, versionId: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a prebuilt domain's models from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {string} domainName Domain name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteCustomPrebuiltDomain(appId: string, versionId: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteCustomPrebuiltDomain(appId: string, versionId: string, domainName: string, callback: ServiceCallback<any>): void;
    deleteCustomPrebuiltDomain(appId: string, versionId: string, domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets information about the hierarchical entity child model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} hChildId The hierarchical entity extractor child ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHierarchicalEntityChildWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, hChildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets information about the hierarchical entity child model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} hChildId The hierarchical entity extractor child ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, callback: ServiceCallback<any>): void;
    getHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} hChildId The hierarchical entity extractor child ID.
     *
     * @param {object} hierarchicalChildModelUpdateObject Model object containing
     * new name of the hierarchical entity child.
     *
     * @param {string} [hierarchicalChildModelUpdateObject.name]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateHierarchicalEntityChildWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: models.HierarchicalChildModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} hChildId The hierarchical entity extractor child ID.
     *
     * @param {object} hierarchicalChildModelUpdateObject Model object containing
     * new name of the hierarchical entity child.
     *
     * @param {string} [hierarchicalChildModelUpdateObject.name]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: models.HierarchicalChildModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: models.HierarchicalChildModelUpdateObject, callback: ServiceCallback<any>): void;
    updateHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: models.HierarchicalChildModelUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a hierarchical entity extractor child from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} hChildId The hierarchical entity extractor child ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteHierarchicalEntityChildWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, hChildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a hierarchical entity extractor child from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} hChildId The hierarchical entity extractor child ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, callback: ServiceCallback<any>): void;
    deleteHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} hierarchicalChildModelCreateObject A model object containing
     * the name of the new hierarchical child model.
     *
     * @param {string} [hierarchicalChildModelCreateObject.name]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addHierarchicalEntityChildWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, hierarchicalChildModelCreateObject: models.HierarchicalChildModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} hierarchicalChildModelCreateObject A model object containing
     * the name of the new hierarchical child model.
     *
     * @param {string} [hierarchicalChildModelCreateObject.name]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hierarchicalChildModelCreateObject: models.HierarchicalChildModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hierarchicalChildModelCreateObject: models.HierarchicalChildModelCreateObject, callback: ServiceCallback<any>): void;
    addHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hierarchicalChildModelCreateObject: models.HierarchicalChildModelCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} compositeChildModelCreateObject A model object containing
     * the name of the new composite child model.
     *
     * @param {string} [compositeChildModelCreateObject.name]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addCompositeEntityChildWithHttpOperationResponse(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: models.CompositeChildModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} compositeChildModelCreateObject A model object containing
     * the name of the new composite child model.
     *
     * @param {string} [compositeChildModelCreateObject.name]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addCompositeEntityChild(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: models.CompositeChildModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addCompositeEntityChild(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: models.CompositeChildModelCreateObject, callback: ServiceCallback<any>): void;
    addCompositeEntityChild(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: models.CompositeChildModelCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a composite entity extractor child from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {uuid} cChildId The hierarchical entity extractor child ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteCompositeEntityChildWithHttpOperationResponse(appId: string, versionId: string, cEntityId: string, cChildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a composite entity extractor child from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {uuid} cChildId The hierarchical entity extractor child ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteCompositeEntityChild(appId: string, versionId: string, cEntityId: string, cChildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteCompositeEntityChild(appId: string, versionId: string, cEntityId: string, cChildId: string, callback: ServiceCallback<any>): void;
    deleteCompositeEntityChild(appId: string, versionId: string, cEntityId: string, cChildId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets information about the regex entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRegexEntityInfosWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Gets information about the regex entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRegexEntityInfos(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getRegexEntityInfos(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    getRegexEntityInfos(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Adds a regex entity model to the application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} regexEntityExtractorCreateObj A model object containing the
     * name and regex pattern for the new regex entity extractor.
     *
     * @param {string} [regexEntityExtractorCreateObj.regexPattern] The regex
     * entity pattern.
     *
     * @param {string} [regexEntityExtractorCreateObj.name] The model name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createRegexEntityModelWithHttpOperationResponse(appId: string, versionId: string, regexEntityExtractorCreateObj: models.RegexModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Adds a regex entity model to the application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} regexEntityExtractorCreateObj A model object containing the
     * name and regex pattern for the new regex entity extractor.
     *
     * @param {string} [regexEntityExtractorCreateObj.regexPattern] The regex
     * entity pattern.
     *
     * @param {string} [regexEntityExtractorCreateObj.name] The model name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createRegexEntityModel(appId: string, versionId: string, regexEntityExtractorCreateObj: models.RegexModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createRegexEntityModel(appId: string, versionId: string, regexEntityExtractorCreateObj: models.RegexModelCreateObject, callback: ServiceCallback<any>): void;
    createRegexEntityModel(appId: string, versionId: string, regexEntityExtractorCreateObj: models.RegexModelCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get information about the Pattern.Any entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPatternAnyEntityInfosWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get information about the Pattern.Any entity models.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPatternAnyEntityInfos(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getPatternAnyEntityInfos(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    getPatternAnyEntityInfos(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Adds a pattern.any entity extractor to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} extractorCreateObject A model object containing the name and
     * explicit list for the new Pattern.Any entity extractor.
     *
     * @param {string} [extractorCreateObject.name] The model name.
     *
     * @param {array} [extractorCreateObject.explicitList] The Pattern.Any explicit
     * list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createPatternAnyEntityModelWithHttpOperationResponse(appId: string, versionId: string, extractorCreateObject: models.PatternAnyModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Adds a pattern.any entity extractor to the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} extractorCreateObject A model object containing the name and
     * explicit list for the new Pattern.Any entity extractor.
     *
     * @param {string} [extractorCreateObject.name] The model name.
     *
     * @param {array} [extractorCreateObject.explicitList] The Pattern.Any explicit
     * list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createPatternAnyEntityModel(appId: string, versionId: string, extractorCreateObject: models.PatternAnyModelCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createPatternAnyEntityModel(appId: string, versionId: string, extractorCreateObject: models.PatternAnyModelCreateObject, callback: ServiceCallback<any>): void;
    createPatternAnyEntityModel(appId: string, versionId: string, extractorCreateObject: models.PatternAnyModelCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityRolesWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityRoles(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getEntityRoles(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    getEntityRoles(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, callback: ServiceCallback<any>): void;
    createEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPrebuiltEntityRolesWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    getPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createPrebuiltEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, callback: ServiceCallback<any>): void;
    createPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getClosedListEntityRolesWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getClosedListEntityRoles(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getClosedListEntityRoles(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    getClosedListEntityRoles(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createClosedListEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createClosedListEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createClosedListEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, callback: ServiceCallback<any>): void;
    createClosedListEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRegexEntityRolesWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRegexEntityRoles(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getRegexEntityRoles(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    getRegexEntityRoles(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createRegexEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createRegexEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createRegexEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, callback: ServiceCallback<any>): void;
    createRegexEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCompositeEntityRolesWithHttpOperationResponse(appId: string, versionId: string, cEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCompositeEntityRoles(appId: string, versionId: string, cEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getCompositeEntityRoles(appId: string, versionId: string, cEntityId: string, callback: ServiceCallback<any>): void;
    getCompositeEntityRoles(appId: string, versionId: string, cEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createCompositeEntityRoleWithHttpOperationResponse(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createCompositeEntityRole(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createCompositeEntityRole(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, callback: ServiceCallback<any>): void;
    createCompositeEntityRole(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPatternAnyEntityRolesWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPatternAnyEntityRoles(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getPatternAnyEntityRoles(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    getPatternAnyEntityRoles(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createPatternAnyEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createPatternAnyEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createPatternAnyEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, callback: ServiceCallback<any>): void;
    createPatternAnyEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHierarchicalEntityRolesWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHierarchicalEntityRoles(appId: string, versionId: string, hEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getHierarchicalEntityRoles(appId: string, versionId: string, hEntityId: string, callback: ServiceCallback<any>): void;
    getHierarchicalEntityRoles(appId: string, versionId: string, hEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createHierarchicalEntityRoleWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, callback: ServiceCallback<any>): void;
    createHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCustomPrebuiltEntityRolesWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get All Entity Roles for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCustomPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getCustomPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    getCustomPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createCustomPrebuiltEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Create an entity role for an entity in the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity model ID.
     *
     * @param {object} entityRoleCreateObject An entity role object containing the
     * name of role.
     *
     * @param {string} [entityRoleCreateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, callback: ServiceCallback<any>): void;
    createCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: models.EntityRoleCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get the explicit list of the pattern.any entity.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getExplicitListWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get the explicit list of the pattern.any entity.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getExplicitList(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getExplicitList(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    getExplicitList(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Add a new item to the explicit list for the Pattern.Any entity.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity extractor ID.
     *
     * @param {object} item The new explicit list item.
     *
     * @param {string} [item.explicitListItem] The explicit list item.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addExplicitListItemWithHttpOperationResponse(appId: string, versionId: string, entityId: string, item: models.ExplicitListItemCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Add a new item to the explicit list for the Pattern.Any entity.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity extractor ID.
     *
     * @param {object} item The new explicit list item.
     *
     * @param {string} [item.explicitListItem] The explicit list item.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addExplicitListItem(appId: string, versionId: string, entityId: string, item: models.ExplicitListItemCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addExplicitListItem(appId: string, versionId: string, entityId: string, item: models.ExplicitListItemCreateObject, callback: ServiceCallback<any>): void;
    addExplicitListItem(appId: string, versionId: string, entityId: string, item: models.ExplicitListItemCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets information of a regex entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} regexEntityId The regex entity model ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRegexEntityEntityInfoWithHttpOperationResponse(appId: string, versionId: string, regexEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Gets information of a regex entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} regexEntityId The regex entity model ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRegexEntityEntityInfo(appId: string, versionId: string, regexEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getRegexEntityEntityInfo(appId: string, versionId: string, regexEntityId: string, callback: ServiceCallback<any>): void;
    getRegexEntityEntityInfo(appId: string, versionId: string, regexEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Updates the regex entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} regexEntityId The regex entity extractor ID.
     *
     * @param {object} regexEntityUpdateObject An object containing the new entity
     * name and regex pattern.
     *
     * @param {string} [regexEntityUpdateObject.regexPattern] The regex entity
     * pattern.
     *
     * @param {string} [regexEntityUpdateObject.name] The model name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateRegexEntityModelWithHttpOperationResponse(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: models.RegexModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Updates the regex entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} regexEntityId The regex entity extractor ID.
     *
     * @param {object} regexEntityUpdateObject An object containing the new entity
     * name and regex pattern.
     *
     * @param {string} [regexEntityUpdateObject.regexPattern] The regex entity
     * pattern.
     *
     * @param {string} [regexEntityUpdateObject.name] The model name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateRegexEntityModel(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: models.RegexModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateRegexEntityModel(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: models.RegexModelUpdateObject, callback: ServiceCallback<any>): void;
    updateRegexEntityModel(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: models.RegexModelUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Deletes a regex entity model from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} regexEntityId The regex entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteRegexEntityModelWithHttpOperationResponse(appId: string, versionId: string, regexEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Deletes a regex entity model from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} regexEntityId The regex entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteRegexEntityModel(appId: string, versionId: string, regexEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteRegexEntityModel(appId: string, versionId: string, regexEntityId: string, callback: ServiceCallback<any>): void;
    deleteRegexEntityModel(appId: string, versionId: string, regexEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets information about the application version's Pattern.Any model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPatternAnyEntityInfoWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Gets information about the application version's Pattern.Any model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPatternAnyEntityInfo(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getPatternAnyEntityInfo(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    getPatternAnyEntityInfo(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Updates the name and explicit list of a Pattern.Any entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity extractor ID.
     *
     * @param {object} patternAnyUpdateObject An object containing the explicit
     * list of the Pattern.Any entity.
     *
     * @param {string} [patternAnyUpdateObject.name] The model name.
     *
     * @param {array} [patternAnyUpdateObject.explicitList] The Pattern.Any
     * explicit list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePatternAnyEntityModelWithHttpOperationResponse(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: models.PatternAnyModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Updates the name and explicit list of a Pattern.Any entity model.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity extractor ID.
     *
     * @param {object} patternAnyUpdateObject An object containing the explicit
     * list of the Pattern.Any entity.
     *
     * @param {string} [patternAnyUpdateObject.name] The model name.
     *
     * @param {array} [patternAnyUpdateObject.explicitList] The Pattern.Any
     * explicit list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePatternAnyEntityModel(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: models.PatternAnyModelUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updatePatternAnyEntityModel(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: models.PatternAnyModelUpdateObject, callback: ServiceCallback<any>): void;
    updatePatternAnyEntityModel(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: models.PatternAnyModelUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Deletes a Pattern.Any entity extractor from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePatternAnyEntityModelWithHttpOperationResponse(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Deletes a Pattern.Any entity extractor from the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity extractor ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePatternAnyEntityModel(appId: string, versionId: string, entityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deletePatternAnyEntityModel(appId: string, versionId: string, entityId: string, callback: ServiceCallback<any>): void;
    deletePatternAnyEntityModel(appId: string, versionId: string, entityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    getEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, callback: ServiceCallback<any>): void;
    updateEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    deleteEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPrebuiltEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    getPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePrebuiltEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updatePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, callback: ServiceCallback<any>): void;
    updatePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePrebuiltEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deletePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    deletePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getClosedListEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    getClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateClosedListEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, callback: ServiceCallback<any>): void;
    updateClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteClosedListEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    deleteClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRegexEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    getRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateRegexEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, callback: ServiceCallback<any>): void;
    updateRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteRegexEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    deleteRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCompositeEntityRoleWithHttpOperationResponse(appId: string, versionId: string, cEntityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, callback: ServiceCallback<any>): void;
    getCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateCompositeEntityRoleWithHttpOperationResponse(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, callback: ServiceCallback<any>): void;
    updateCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteCompositeEntityRoleWithHttpOperationResponse(appId: string, versionId: string, cEntityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} cEntityId The composite entity extractor ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, callback: ServiceCallback<any>): void;
    deleteCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPatternAnyEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getPatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    getPatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePatternAnyEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updatePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, callback: ServiceCallback<any>): void;
    updatePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePatternAnyEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deletePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    deletePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHierarchicalEntityRoleWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, callback: ServiceCallback<any>): void;
    getHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateHierarchicalEntityRoleWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, callback: ServiceCallback<any>): void;
    updateHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteHierarchicalEntityRoleWithHttpOperationResponse(appId: string, versionId: string, hEntityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} hEntityId The hierarchical entity extractor ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, callback: ServiceCallback<any>): void;
    deleteHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCustomEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get one entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId entity ID.
     *
     * @param {uuid} roleId entity role ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    getCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateCustomPrebuiltEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Update an entity role for a given entity
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role ID.
     *
     * @param {object} entityRoleUpdateObject The new entity role.
     *
     * @param {string} [entityRoleUpdateObject.name] The entity role name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, callback: ServiceCallback<any>): void;
    updateCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: models.EntityRoleUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteCustomEntityRoleWithHttpOperationResponse(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete an entity role.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The entity ID.
     *
     * @param {uuid} roleId The entity role Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: ServiceCallback<any>): void;
    deleteCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get the explicit list of the pattern.any entity.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity Id.
     *
     * @param {number} itemId The explicit list item Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getExplicitListItemWithHttpOperationResponse(appId: string, versionId: string, entityId: string, itemId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get the explicit list of the pattern.any entity.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity Id.
     *
     * @param {number} itemId The explicit list item Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, callback: ServiceCallback<any>): void;
    getExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Updates an explicit list item for a Pattern.Any entity.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity extractor ID.
     *
     * @param {number} itemId The explicit list item ID.
     *
     * @param {object} item The new explicit list item.
     *
     * @param {string} [item.explicitListItem] The explicit list item.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateExplicitListItemWithHttpOperationResponse(appId: string, versionId: string, entityId: string, itemId: number, item: models.ExplicitListItemUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Updates an explicit list item for a Pattern.Any entity.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The Pattern.Any entity extractor ID.
     *
     * @param {number} itemId The explicit list item ID.
     *
     * @param {object} item The new explicit list item.
     *
     * @param {string} [item.explicitListItem] The explicit list item.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, item: models.ExplicitListItemUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, item: models.ExplicitListItemUpdateObject, callback: ServiceCallback<any>): void;
    updateExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, item: models.ExplicitListItemUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Delete the explicit list item from the Pattern.any explicit list.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The pattern.any entity id.
     *
     * @param {number} itemId The explicit list item which will be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteExplicitListItemWithHttpOperationResponse(appId: string, versionId: string, entityId: string, itemId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete the explicit list item from the Pattern.any explicit list.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} entityId The pattern.any entity id.
     *
     * @param {number} itemId The explicit list item which will be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, callback: ServiceCallback<any>): void;
    deleteExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Apps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LUISAuthoringClient.
 */
export interface Apps {


    /**
     * Creates a new LUIS app.
     *
     * @param {object} applicationCreateObject A model containing Name, Description
     * (optional), Culture, Usage Scenario (optional), Domain (optional) and
     * initial version ID (optional) of the application. Default value for the
     * version ID is 0.1. Note: the culture cannot be changed after the app is
     * created.
     *
     * @param {string} applicationCreateObject.culture The culture for the new
     * application. It is the language that your app understands and speaks. E.g.:
     * "en-us". Note: the culture cannot be changed after the app is created.
     *
     * @param {string} [applicationCreateObject.domain] The domain for the new
     * application. Optional. E.g.: Comics.
     *
     * @param {string} [applicationCreateObject.description] Description of the new
     * application. Optional.
     *
     * @param {string} [applicationCreateObject.initialVersionId] The initial
     * version ID. Optional. Default value is: "0.1"
     *
     * @param {string} [applicationCreateObject.usageScenario] Defines the scenario
     * for the new application. Optional. E.g.: IoT.
     *
     * @param {string} applicationCreateObject.name The name for the new
     * application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addWithHttpOperationResponse(applicationCreateObject: models.ApplicationCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a new LUIS app.
     *
     * @param {object} applicationCreateObject A model containing Name, Description
     * (optional), Culture, Usage Scenario (optional), Domain (optional) and
     * initial version ID (optional) of the application. Default value for the
     * version ID is 0.1. Note: the culture cannot be changed after the app is
     * created.
     *
     * @param {string} applicationCreateObject.culture The culture for the new
     * application. It is the language that your app understands and speaks. E.g.:
     * "en-us". Note: the culture cannot be changed after the app is created.
     *
     * @param {string} [applicationCreateObject.domain] The domain for the new
     * application. Optional. E.g.: Comics.
     *
     * @param {string} [applicationCreateObject.description] Description of the new
     * application. Optional.
     *
     * @param {string} [applicationCreateObject.initialVersionId] The initial
     * version ID. Optional. Default value is: "0.1"
     *
     * @param {string} [applicationCreateObject.usageScenario] Defines the scenario
     * for the new application. Optional. E.g.: IoT.
     *
     * @param {string} applicationCreateObject.name The name for the new
     * application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    add(applicationCreateObject: models.ApplicationCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    add(applicationCreateObject: models.ApplicationCreateObject, callback: ServiceCallback<any>): void;
    add(applicationCreateObject: models.ApplicationCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Lists all of the user applications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Lists all of the user applications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(callback: ServiceCallback<any>): void;
    list(options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Imports an application to LUIS, the application's structure should be
     * included in the request body.
     *
     * @param {object} luisApp A LUIS application structure.
     *
     * @param {string} [luisApp.name] The name of the application.
     *
     * @param {string} [luisApp.versionId] The version ID of the application that
     * was exported.
     *
     * @param {string} [luisApp.desc] The description of the application.
     *
     * @param {string} [luisApp.culture] The culture of the application. E.g.:
     * en-us.
     *
     * @param {array} [luisApp.intents] List of intents.
     *
     * @param {array} [luisApp.entities] List of entities.
     *
     * @param {array} [luisApp.closedLists] List of closed lists.
     *
     * @param {array} [luisApp.composites] List of composite entities.
     *
     * @param {array} [luisApp.patternAnyEntities] List of Pattern.Any entities.
     *
     * @param {array} [luisApp.regexEntities] List of regular expression entities.
     *
     * @param {array} [luisApp.prebuiltEntities] List of prebuilt entities.
     *
     * @param {array} [luisApp.regexFeatures] List of pattern features.
     *
     * @param {array} [luisApp.modelFeatures] List of model features.
     *
     * @param {array} [luisApp.patterns] List of patterns.
     *
     * @param {array} [luisApp.utterances] List of sample utterances.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.appName] The application name to create. If not
     * specified, the application name will be read from the imported object.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    importMethodWithHttpOperationResponse(luisApp: models.LuisApp, options?: { appName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Imports an application to LUIS, the application's structure should be
     * included in the request body.
     *
     * @param {object} luisApp A LUIS application structure.
     *
     * @param {string} [luisApp.name] The name of the application.
     *
     * @param {string} [luisApp.versionId] The version ID of the application that
     * was exported.
     *
     * @param {string} [luisApp.desc] The description of the application.
     *
     * @param {string} [luisApp.culture] The culture of the application. E.g.:
     * en-us.
     *
     * @param {array} [luisApp.intents] List of intents.
     *
     * @param {array} [luisApp.entities] List of entities.
     *
     * @param {array} [luisApp.closedLists] List of closed lists.
     *
     * @param {array} [luisApp.composites] List of composite entities.
     *
     * @param {array} [luisApp.patternAnyEntities] List of Pattern.Any entities.
     *
     * @param {array} [luisApp.regexEntities] List of regular expression entities.
     *
     * @param {array} [luisApp.prebuiltEntities] List of prebuilt entities.
     *
     * @param {array} [luisApp.regexFeatures] List of pattern features.
     *
     * @param {array} [luisApp.modelFeatures] List of model features.
     *
     * @param {array} [luisApp.patterns] List of patterns.
     *
     * @param {array} [luisApp.utterances] List of sample utterances.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.appName] The application name to create. If not
     * specified, the application name will be read from the imported object.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    importMethod(luisApp: models.LuisApp, options?: { appName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    importMethod(luisApp: models.LuisApp, callback: ServiceCallback<any>): void;
    importMethod(luisApp: models.LuisApp, options: { appName? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCortanaEndpointsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCortanaEndpoints(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listCortanaEndpoints(callback: ServiceCallback<any>): void;
    listCortanaEndpoints(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the available application domains.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDomainsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the available application domains.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDomains(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listDomains(callback: ServiceCallback<any>): void;
    listDomains(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the application available usage scenarios.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsageScenariosWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the application available usage scenarios.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsageScenarios(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listUsageScenarios(callback: ServiceCallback<any>): void;
    listUsageScenarios(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the supported application cultures.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSupportedCulturesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the supported application cultures.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSupportedCultures(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listSupportedCultures(callback: ServiceCallback<any>): void;
    listSupportedCultures(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the query logs of the past month for the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    downloadQueryLogsWithHttpOperationResponse(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the query logs of the past month for the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    downloadQueryLogs(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    downloadQueryLogs(appId: string, callback: ServiceCallback<any>): void;
    downloadQueryLogs(appId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the application info.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the application info.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    get(appId: string, callback: ServiceCallback<any>): void;
    get(appId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the name or description of the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} applicationUpdateObject A model containing Name and
     * Description of the application.
     *
     * @param {string} [applicationUpdateObject.name] The application's new name.
     *
     * @param {string} [applicationUpdateObject.description] The application's new
     * description.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(appId: string, applicationUpdateObject: models.ApplicationUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the name or description of the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} applicationUpdateObject A model containing Name and
     * Description of the application.
     *
     * @param {string} [applicationUpdateObject.name] The application's new name.
     *
     * @param {string} [applicationUpdateObject.description] The application's new
     * description.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(appId: string, applicationUpdateObject: models.ApplicationUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    update(appId: string, applicationUpdateObject: models.ApplicationUpdateObject, callback: ServiceCallback<any>): void;
    update(appId: string, applicationUpdateObject: models.ApplicationUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes an application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes an application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteMethod(appId: string, callback: ServiceCallback<any>): void;
    deleteMethod(appId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Publishes a specific version of the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} applicationPublishObject The application publish object. The
     * region is the target region that the application is published to.
     *
     * @param {string} [applicationPublishObject.versionId] The version ID to
     * publish.
     *
     * @param {boolean} [applicationPublishObject.isStaging] Indicates if the
     * staging slot should be used, instead of the Production one.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    publishWithHttpOperationResponse(appId: string, applicationPublishObject: models.ApplicationPublishObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Publishes a specific version of the application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} applicationPublishObject The application publish object. The
     * region is the target region that the application is published to.
     *
     * @param {string} [applicationPublishObject.versionId] The version ID to
     * publish.
     *
     * @param {boolean} [applicationPublishObject.isStaging] Indicates if the
     * staging slot should be used, instead of the Production one.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    publish(appId: string, applicationPublishObject: models.ApplicationPublishObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    publish(appId: string, applicationPublishObject: models.ApplicationPublishObject, callback: ServiceCallback<any>): void;
    publish(appId: string, applicationPublishObject: models.ApplicationPublishObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Get the application settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSettingsWithHttpOperationResponse(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Get the application settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSettings(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getSettings(appId: string, callback: ServiceCallback<any>): void;
    getSettings(appId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the application settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} applicationSettingUpdateObject An object containing the new
     * application settings.
     *
     * @param {boolean} [applicationSettingUpdateObject.publicProperty] Setting
     * your application as public allows other people to use your application's
     * endpoint using their own keys.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSettingsWithHttpOperationResponse(appId: string, applicationSettingUpdateObject: models.ApplicationSettingUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the application settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} applicationSettingUpdateObject An object containing the new
     * application settings.
     *
     * @param {boolean} [applicationSettingUpdateObject.publicProperty] Setting
     * your application as public allows other people to use your application's
     * endpoint using their own keys.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSettings(appId: string, applicationSettingUpdateObject: models.ApplicationSettingUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateSettings(appId: string, applicationSettingUpdateObject: models.ApplicationSettingUpdateObject, callback: ServiceCallback<any>): void;
    updateSettings(appId: string, applicationSettingUpdateObject: models.ApplicationSettingUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Get the application publish settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPublishSettingsWithHttpOperationResponse(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Get the application publish settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPublishSettings(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getPublishSettings(appId: string, callback: ServiceCallback<any>): void;
    getPublishSettings(appId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the application publish settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} publishSettingUpdateObject An object containing the new
     * publish application settings.
     *
     * @param {boolean} [publishSettingUpdateObject.sentimentAnalysis] Setting
     * sentiment analysis as true returns the Sentiment of the input utterance
     * along with the response
     *
     * @param {boolean} [publishSettingUpdateObject.speech] Setting speech as
     * public enables speech priming in your app
     *
     * @param {boolean} [publishSettingUpdateObject.spellChecker] Setting spell
     * checker as public enables spell checking the input utterance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePublishSettingsWithHttpOperationResponse(appId: string, publishSettingUpdateObject: models.PublishSettingUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the application publish settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} publishSettingUpdateObject An object containing the new
     * publish application settings.
     *
     * @param {boolean} [publishSettingUpdateObject.sentimentAnalysis] Setting
     * sentiment analysis as true returns the Sentiment of the input utterance
     * along with the response
     *
     * @param {boolean} [publishSettingUpdateObject.speech] Setting speech as
     * public enables speech priming in your app
     *
     * @param {boolean} [publishSettingUpdateObject.spellChecker] Setting spell
     * checker as public enables spell checking the input utterance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePublishSettings(appId: string, publishSettingUpdateObject: models.PublishSettingUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updatePublishSettings(appId: string, publishSettingUpdateObject: models.PublishSettingUpdateObject, callback: ServiceCallback<any>): void;
    updatePublishSettings(appId: string, publishSettingUpdateObject: models.PublishSettingUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listEndpointsWithHttpOperationResponse(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listEndpoints(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listEndpoints(appId: string, callback: ServiceCallback<any>): void;
    listEndpoints(appId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAvailableCustomPrebuiltDomainsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAvailableCustomPrebuiltDomains(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listAvailableCustomPrebuiltDomains(callback: ServiceCallback<any>): void;
    listAvailableCustomPrebuiltDomains(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a prebuilt domain along with its models as a new application.
     *
     * @param {object} prebuiltDomainCreateObject A prebuilt domain create object
     * containing the name and culture of the domain.
     *
     * @param {string} [prebuiltDomainCreateObject.domainName] The domain name.
     *
     * @param {string} [prebuiltDomainCreateObject.culture] The culture of the new
     * domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addCustomPrebuiltDomainWithHttpOperationResponse(prebuiltDomainCreateObject: models.PrebuiltDomainCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a prebuilt domain along with its models as a new application.
     *
     * @param {object} prebuiltDomainCreateObject A prebuilt domain create object
     * containing the name and culture of the domain.
     *
     * @param {string} [prebuiltDomainCreateObject.domainName] The domain name.
     *
     * @param {string} [prebuiltDomainCreateObject.culture] The culture of the new
     * domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addCustomPrebuiltDomain(prebuiltDomainCreateObject: models.PrebuiltDomainCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addCustomPrebuiltDomain(prebuiltDomainCreateObject: models.PrebuiltDomainCreateObject, callback: ServiceCallback<any>): void;
    addCustomPrebuiltDomain(prebuiltDomainCreateObject: models.PrebuiltDomainCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets all the available custom prebuilt domains for a specific culture.
     *
     * @param {string} culture Culture.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAvailableCustomPrebuiltDomainsForCultureWithHttpOperationResponse(culture: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets all the available custom prebuilt domains for a specific culture.
     *
     * @param {string} culture Culture.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAvailableCustomPrebuiltDomainsForCulture(culture: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listAvailableCustomPrebuiltDomainsForCulture(culture: string, callback: ServiceCallback<any>): void;
    listAvailableCustomPrebuiltDomainsForCulture(culture: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Versions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LUISAuthoringClient.
 */
export interface Versions {


    /**
     * Creates a new version using the current snapshot of the selected application
     * version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.versionCloneObject] A model containing the new
     * version ID.
     *
     * @param {string} [options.versionCloneObject.version] The new version for the
     * cloned model.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cloneWithHttpOperationResponse(appId: string, versionId: string, options?: { versionCloneObject? : models.TaskUpdateObject, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a new version using the current snapshot of the selected application
     * version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.versionCloneObject] A model containing the new
     * version ID.
     *
     * @param {string} [options.versionCloneObject.version] The new version for the
     * cloned model.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    clone(appId: string, versionId: string, options?: { versionCloneObject? : models.TaskUpdateObject, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    clone(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    clone(appId: string, versionId: string, options: { versionCloneObject? : models.TaskUpdateObject, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the application versions info.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(appId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the application versions info.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(appId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(appId: string, callback: ServiceCallback<any>): void;
    list(appId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the version info.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the version info.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    get(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    get(appId: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the name or description of the application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} versionUpdateObject A model containing Name and Description
     * of the application.
     *
     * @param {string} [versionUpdateObject.version] The new version for the cloned
     * model.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(appId: string, versionId: string, versionUpdateObject: models.TaskUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the name or description of the application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} versionUpdateObject A model containing Name and Description
     * of the application.
     *
     * @param {string} [versionUpdateObject.version] The new version for the cloned
     * model.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(appId: string, versionId: string, versionUpdateObject: models.TaskUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    update(appId: string, versionId: string, versionUpdateObject: models.TaskUpdateObject, callback: ServiceCallback<any>): void;
    update(appId: string, versionId: string, versionUpdateObject: models.TaskUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes an application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes an application version.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteMethod(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    deleteMethod(appId: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Exports a LUIS application to JSON format.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportMethodWithHttpOperationResponse(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Exports a LUIS application to JSON format.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportMethod(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    exportMethod(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    exportMethod(appId: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Imports a new version into a LUIS application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} luisApp A LUIS application structure.
     *
     * @param {string} [luisApp.name] The name of the application.
     *
     * @param {string} [luisApp.versionId] The version ID of the application that
     * was exported.
     *
     * @param {string} [luisApp.desc] The description of the application.
     *
     * @param {string} [luisApp.culture] The culture of the application. E.g.:
     * en-us.
     *
     * @param {array} [luisApp.intents] List of intents.
     *
     * @param {array} [luisApp.entities] List of entities.
     *
     * @param {array} [luisApp.closedLists] List of closed lists.
     *
     * @param {array} [luisApp.composites] List of composite entities.
     *
     * @param {array} [luisApp.patternAnyEntities] List of Pattern.Any entities.
     *
     * @param {array} [luisApp.regexEntities] List of regular expression entities.
     *
     * @param {array} [luisApp.prebuiltEntities] List of prebuilt entities.
     *
     * @param {array} [luisApp.regexFeatures] List of pattern features.
     *
     * @param {array} [luisApp.modelFeatures] List of model features.
     *
     * @param {array} [luisApp.patterns] List of patterns.
     *
     * @param {array} [luisApp.utterances] List of sample utterances.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.versionId] The new versionId to import. If not
     * specified, the versionId will be read from the imported object.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    importMethodWithHttpOperationResponse(appId: string, luisApp: models.LuisApp, options?: { versionId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Imports a new version into a LUIS application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} luisApp A LUIS application structure.
     *
     * @param {string} [luisApp.name] The name of the application.
     *
     * @param {string} [luisApp.versionId] The version ID of the application that
     * was exported.
     *
     * @param {string} [luisApp.desc] The description of the application.
     *
     * @param {string} [luisApp.culture] The culture of the application. E.g.:
     * en-us.
     *
     * @param {array} [luisApp.intents] List of intents.
     *
     * @param {array} [luisApp.entities] List of entities.
     *
     * @param {array} [luisApp.closedLists] List of closed lists.
     *
     * @param {array} [luisApp.composites] List of composite entities.
     *
     * @param {array} [luisApp.patternAnyEntities] List of Pattern.Any entities.
     *
     * @param {array} [luisApp.regexEntities] List of regular expression entities.
     *
     * @param {array} [luisApp.prebuiltEntities] List of prebuilt entities.
     *
     * @param {array} [luisApp.regexFeatures] List of pattern features.
     *
     * @param {array} [luisApp.modelFeatures] List of model features.
     *
     * @param {array} [luisApp.patterns] List of patterns.
     *
     * @param {array} [luisApp.utterances] List of sample utterances.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.versionId] The new versionId to import. If not
     * specified, the versionId will be read from the imported object.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    importMethod(appId: string, luisApp: models.LuisApp, options?: { versionId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    importMethod(appId: string, luisApp: models.LuisApp, callback: ServiceCallback<any>): void;
    importMethod(appId: string, luisApp: models.LuisApp, options: { versionId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deleted an unlabelled utterance.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {string} utterance The utterance text to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteUnlabelledUtteranceWithHttpOperationResponse(appId: string, versionId: string, utterance: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deleted an unlabelled utterance.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {string} utterance The utterance text to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteUnlabelledUtterance(appId: string, versionId: string, utterance: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteUnlabelledUtterance(appId: string, versionId: string, utterance: string, callback: ServiceCallback<any>): void;
    deleteUnlabelledUtterance(appId: string, versionId: string, utterance: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Train
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LUISAuthoringClient.
 */
export interface Train {


    /**
     * Sends a training request for a version of a specified LUIS app. This POST
     * request initiates a request asynchronously. To determine whether the
     * training request is successful, submit a GET request to get training status.
     * Note: The application version is not fully trained unless all the models
     * (intents and entities) are trained successfully or are up to date. To verify
     * training success, get the training status at least once after training is
     * complete.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    trainVersionWithHttpOperationResponse(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Sends a training request for a version of a specified LUIS app. This POST
     * request initiates a request asynchronously. To determine whether the
     * training request is successful, submit a GET request to get training status.
     * Note: The application version is not fully trained unless all the models
     * (intents and entities) are trained successfully or are up to date. To verify
     * training success, get the training status at least once after training is
     * complete.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    trainVersion(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    trainVersion(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    trainVersion(appId: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the training status of all models (intents and entities) for the
     * specified LUIS app. You must call the train API to train the LUIS app before
     * you call this API to get training status. "appID" specifies the LUIS app ID.
     * "versionId" specifies the version number of the LUIS app. For example,
     * "0.1".
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStatusWithHttpOperationResponse(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the training status of all models (intents and entities) for the
     * specified LUIS app. You must call the train API to train the LUIS app before
     * you call this API to get training status. "appID" specifies the LUIS app ID.
     * "versionId" specifies the version number of the LUIS app. For example,
     * "0.1".
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStatus(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getStatus(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    getStatus(appId: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Permissions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LUISAuthoringClient.
 */
export interface Permissions {


    /**
     * Gets the list of user emails that have permissions to access your
     * application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the list of user emails that have permissions to access your
     * application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(appId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(appId: string, callback: ServiceCallback<any>): void;
    list(appId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Adds a user to the allowed list of users to access this LUIS application.
     * Users are added using their email address.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} userToAdd A model containing the user's email address.
     *
     * @param {string} [userToAdd.email] The email address of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addWithHttpOperationResponse(appId: string, userToAdd: models.UserCollaborator, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Adds a user to the allowed list of users to access this LUIS application.
     * Users are added using their email address.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} userToAdd A model containing the user's email address.
     *
     * @param {string} [userToAdd.email] The email address of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    add(appId: string, userToAdd: models.UserCollaborator, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    add(appId: string, userToAdd: models.UserCollaborator, callback: ServiceCallback<any>): void;
    add(appId: string, userToAdd: models.UserCollaborator, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Removes a user from the allowed list of users to access this LUIS
     * application. Users are removed using their email address.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} userToDelete A model containing the user's email address.
     *
     * @param {string} [userToDelete.email] The email address of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(appId: string, userToDelete: models.UserCollaborator, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Removes a user from the allowed list of users to access this LUIS
     * application. Users are removed using their email address.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} userToDelete A model containing the user's email address.
     *
     * @param {string} [userToDelete.email] The email address of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(appId: string, userToDelete: models.UserCollaborator, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteMethod(appId: string, userToDelete: models.UserCollaborator, callback: ServiceCallback<any>): void;
    deleteMethod(appId: string, userToDelete: models.UserCollaborator, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Replaces the current users access list with the one sent in the body. If an
     * empty list is sent, all access to other users will be removed.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} collaborators A model containing a list of user's email
     * addresses.
     *
     * @param {array} [collaborators.emails] The email address of the users.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(appId: string, collaborators: models.CollaboratorsArray, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Replaces the current users access list with the one sent in the body. If an
     * empty list is sent, all access to other users will be removed.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {object} collaborators A model containing a list of user's email
     * addresses.
     *
     * @param {array} [collaborators.emails] The email address of the users.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(appId: string, collaborators: models.CollaboratorsArray, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    update(appId: string, collaborators: models.CollaboratorsArray, callback: ServiceCallback<any>): void;
    update(appId: string, collaborators: models.CollaboratorsArray, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Pattern
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LUISAuthoringClient.
 */
export interface Pattern {


    /**
     * @summary Adds one pattern to the specified application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} pattern The input pattern.
     *
     * @param {string} [pattern.pattern] The pattern text.
     *
     * @param {string} [pattern.intent] The intent's name which the pattern belongs
     * to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addPatternWithHttpOperationResponse(appId: string, versionId: string, pattern: models.PatternRuleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Adds one pattern to the specified application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} pattern The input pattern.
     *
     * @param {string} [pattern.pattern] The pattern text.
     *
     * @param {string} [pattern.intent] The intent's name which the pattern belongs
     * to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addPattern(appId: string, versionId: string, pattern: models.PatternRuleCreateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addPattern(appId: string, versionId: string, pattern: models.PatternRuleCreateObject, callback: ServiceCallback<any>): void;
    addPattern(appId: string, versionId: string, pattern: models.PatternRuleCreateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Returns an application version's patterns.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPatternsWithHttpOperationResponse(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Returns an application version's patterns.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPatterns(appId: string, versionId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getPatterns(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    getPatterns(appId: string, versionId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Updates patterns
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {array} patterns An array represents the patterns.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePatternsWithHttpOperationResponse(appId: string, versionId: string, patterns: models.PatternRuleUpdateObject[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Updates patterns
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {array} patterns An array represents the patterns.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePatterns(appId: string, versionId: string, patterns: models.PatternRuleUpdateObject[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updatePatterns(appId: string, versionId: string, patterns: models.PatternRuleUpdateObject[], callback: ServiceCallback<any>): void;
    updatePatterns(appId: string, versionId: string, patterns: models.PatternRuleUpdateObject[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Adds a batch of patterns to the specified application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {array} patterns A JSON array containing patterns.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    batchAddPatternsWithHttpOperationResponse(appId: string, versionId: string, patterns: models.PatternRuleCreateObject[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Adds a batch of patterns to the specified application.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {array} patterns A JSON array containing patterns.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    batchAddPatterns(appId: string, versionId: string, patterns: models.PatternRuleCreateObject[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    batchAddPatterns(appId: string, versionId: string, patterns: models.PatternRuleCreateObject[], callback: ServiceCallback<any>): void;
    batchAddPatterns(appId: string, versionId: string, patterns: models.PatternRuleCreateObject[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Deletes the patterns with the specified IDs.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {array} patternIds The patterns IDs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePatternsWithHttpOperationResponse(appId: string, versionId: string, patternIds: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Deletes the patterns with the specified IDs.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {array} patternIds The patterns IDs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePatterns(appId: string, versionId: string, patternIds: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deletePatterns(appId: string, versionId: string, patternIds: string[], callback: ServiceCallback<any>): void;
    deletePatterns(appId: string, versionId: string, patternIds: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Updates a pattern
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} patternId The pattern ID.
     *
     * @param {object} pattern An object representing a pattern.
     *
     * @param {uuid} [pattern.id] The pattern ID.
     *
     * @param {string} [pattern.pattern] The pattern text.
     *
     * @param {string} [pattern.intent] The intent's name which the pattern belongs
     * to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePatternWithHttpOperationResponse(appId: string, versionId: string, patternId: string, pattern: models.PatternRuleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Updates a pattern
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} patternId The pattern ID.
     *
     * @param {object} pattern An object representing a pattern.
     *
     * @param {uuid} [pattern.id] The pattern ID.
     *
     * @param {string} [pattern.pattern] The pattern text.
     *
     * @param {string} [pattern.intent] The intent's name which the pattern belongs
     * to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePattern(appId: string, versionId: string, patternId: string, pattern: models.PatternRuleUpdateObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updatePattern(appId: string, versionId: string, patternId: string, pattern: models.PatternRuleUpdateObject, callback: ServiceCallback<any>): void;
    updatePattern(appId: string, versionId: string, patternId: string, pattern: models.PatternRuleUpdateObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Deletes the pattern with the specified ID.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} patternId The pattern ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePatternWithHttpOperationResponse(appId: string, versionId: string, patternId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Deletes the pattern with the specified ID.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} patternId The pattern ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePattern(appId: string, versionId: string, patternId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deletePattern(appId: string, versionId: string, patternId: string, callback: ServiceCallback<any>): void;
    deletePattern(appId: string, versionId: string, patternId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Returns patterns to be retrieved for the specific intent.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} intentId The intent classifier ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getIntentPatternsWithHttpOperationResponse(appId: string, versionId: string, intentId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Returns patterns to be retrieved for the specific intent.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {uuid} intentId The intent classifier ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of entries to skip. Default value
     * is 0.
     *
     * @param {number} [options.take] The number of entries to return. Maximum page
     * size is 500. Default is 100.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getIntentPatterns(appId: string, versionId: string, intentId: string, options?: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getIntentPatterns(appId: string, versionId: string, intentId: string, callback: ServiceCallback<any>): void;
    getIntentPatterns(appId: string, versionId: string, intentId: string, options: { skip? : number, take? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Settings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LUISAuthoringClient.
 */
export interface Settings {


    /**
     * Gets the application version settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the application version settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(appId: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(appId: string, versionId: string, callback: ServiceCallback<any>): void;
    list(appId: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates the application version settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} listOfAppVersionSettingObject A list of the updated
     * application version settings.
     *
     * @param {string} [listOfAppVersionSettingObject.name] The application version
     * setting name.
     *
     * @param {string} [listOfAppVersionSettingObject.value] The application
     * version setting value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(appId: string, versionId: string, listOfAppVersionSettingObject: models.AppVersionSettingObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates the application version settings.
     *
     * @param {uuid} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {object} listOfAppVersionSettingObject A list of the updated
     * application version settings.
     *
     * @param {string} [listOfAppVersionSettingObject.name] The application version
     * setting name.
     *
     * @param {string} [listOfAppVersionSettingObject.value] The application
     * version setting value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(appId: string, versionId: string, listOfAppVersionSettingObject: models.AppVersionSettingObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    update(appId: string, versionId: string, listOfAppVersionSettingObject: models.AppVersionSettingObject, callback: ServiceCallback<any>): void;
    update(appId: string, versionId: string, listOfAppVersionSettingObject: models.AppVersionSettingObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}
