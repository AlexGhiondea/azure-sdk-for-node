/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Gets predictions for a given utterance, in the form of intents and entities.
 * The current maximum query size is 500 characters.
 *
 * @param {string} appId The LUIS application ID (guid).
 *
 * @param {string} query The utterance to predict.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.timezoneOffset] The timezone offset for the
 * location of the request.
 *
 * @param {boolean} [options.verbose] If true, return all intents instead of
 * just the top scoring intent.
 *
 * @param {boolean} [options.staging] Use the staging endpoint slot.
 *
 * @param {boolean} [options.spellCheck] Enable spell checking.
 *
 * @param {string} [options.bingSpellCheckSubscriptionKey] The subscription key
 * to use when enabling bing spell check
 *
 * @param {boolean} [options.log] Log query (default is true)
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _gET(appId, query, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let timezoneOffset = (options && options.timezoneOffset !== undefined) ? options.timezoneOffset : undefined;
  let verbose = (options && options.verbose !== undefined) ? options.verbose : undefined;
  let staging = (options && options.staging !== undefined) ? options.staging : undefined;
  let spellCheck = (options && options.spellCheck !== undefined) ? options.spellCheck : undefined;
  let bingSpellCheckSubscriptionKey = (options && options.bingSpellCheckSubscriptionKey !== undefined) ? options.bingSpellCheckSubscriptionKey : undefined;
  let log = (options && options.log !== undefined) ? options.log : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string') {
      throw new Error('appId cannot be null or undefined and it must be of type string.');
    }
    if (query === null || query === undefined || typeof query.valueOf() !== 'string') {
      throw new Error('query cannot be null or undefined and it must be of type string.');
    }
    if (query !== null && query !== undefined) {
      if (query.length > 500)
      {
        throw new Error('"query" should satisfy the constraint - "MaxLength": 500');
      }
    }
    if (timezoneOffset !== null && timezoneOffset !== undefined && typeof timezoneOffset !== 'number') {
      throw new Error('timezoneOffset must be of type number.');
    }
    if (verbose !== null && verbose !== undefined && typeof verbose !== 'boolean') {
      throw new Error('verbose must be of type boolean.');
    }
    if (staging !== null && staging !== undefined && typeof staging !== 'boolean') {
      throw new Error('staging must be of type boolean.');
    }
    if (spellCheck !== null && spellCheck !== undefined && typeof spellCheck !== 'boolean') {
      throw new Error('spellCheck must be of type boolean.');
    }
    if (bingSpellCheckSubscriptionKey !== null && bingSpellCheckSubscriptionKey !== undefined && typeof bingSpellCheckSubscriptionKey.valueOf() !== 'string') {
      throw new Error('bingSpellCheckSubscriptionKey must be of type string.');
    }
    if (log !== null && log !== undefined && typeof log !== 'boolean') {
      throw new Error('log must be of type boolean.');
    }
    if (this.client.ocpApimSubscriptionKey === null || this.client.ocpApimSubscriptionKey === undefined || typeof this.client.ocpApimSubscriptionKey.valueOf() !== 'string') {
      throw new Error('this.client.ocpApimSubscriptionKey cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId));
  let queryParameters = [];
  queryParameters.push('q=' + encodeURIComponent(query));
  if (timezoneOffset !== null && timezoneOffset !== undefined) {
    queryParameters.push('timezoneOffset=' + encodeURIComponent(timezoneOffset.toString()));
  }
  if (verbose !== null && verbose !== undefined) {
    queryParameters.push('verbose=' + encodeURIComponent(verbose.toString()));
  }
  if (staging !== null && staging !== undefined) {
    queryParameters.push('staging=' + encodeURIComponent(staging.toString()));
  }
  if (spellCheck !== null && spellCheck !== undefined) {
    queryParameters.push('spellCheck=' + encodeURIComponent(spellCheck.toString()));
  }
  if (bingSpellCheckSubscriptionKey !== null && bingSpellCheckSubscriptionKey !== undefined) {
    queryParameters.push('bing-spell-check-subscription-key=' + encodeURIComponent(bingSpellCheckSubscriptionKey));
  }
  if (log !== null && log !== undefined) {
    queryParameters.push('log=' + encodeURIComponent(log.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.ocpApimSubscriptionKey !== undefined && this.client.ocpApimSubscriptionKey !== null) {
    httpRequest.headers['Ocp-Apim-Subscription-Key'] = this.client.ocpApimSubscriptionKey;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 409 && statusCode !== 410 && statusCode !== 414 && statusCode !== 429) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['LuisResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 400) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 401) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }
    // Deserialize Response
    if (statusCode === 403) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError3 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError3.request = msRest.stripRequest(httpRequest);
        deserializationError3.response = msRest.stripResponse(response);
        return callback(deserializationError3);
      }
    }
    // Deserialize Response
    if (statusCode === 410) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError4 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError4.request = msRest.stripRequest(httpRequest);
        deserializationError4.response = msRest.stripResponse(response);
        return callback(deserializationError4);
      }
    }
    // Deserialize Response
    if (statusCode === 429) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError5 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError5.request = msRest.stripRequest(httpRequest);
        deserializationError5.response = msRest.stripResponse(response);
        return callback(deserializationError5);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets predictions for a given utterance, in the form of intents and entities.
 * The current maximum query size is 500 characters.
 *
 * @param {string} appId The LUIS application ID (Guid).
 *
 * @param {string} query The utterance to predict.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.timezoneOffset] The timezone offset for the
 * location of the request.
 *
 * @param {boolean} [options.verbose] If true, return all intents instead of
 * just the top scoring intent.
 *
 * @param {boolean} [options.staging] Use the staging endpoint slot.
 *
 * @param {boolean} [options.spellCheck] Enable spell checking.
 *
 * @param {string} [options.bingSpellCheckSubscriptionKey] The subscription key
 * to use when enabling bing spell check
 *
 * @param {boolean} [options.log] Log query (default is true)
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _pOST(appId, query, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let timezoneOffset = (options && options.timezoneOffset !== undefined) ? options.timezoneOffset : undefined;
  let verbose = (options && options.verbose !== undefined) ? options.verbose : undefined;
  let staging = (options && options.staging !== undefined) ? options.staging : undefined;
  let spellCheck = (options && options.spellCheck !== undefined) ? options.spellCheck : undefined;
  let bingSpellCheckSubscriptionKey = (options && options.bingSpellCheckSubscriptionKey !== undefined) ? options.bingSpellCheckSubscriptionKey : undefined;
  let log = (options && options.log !== undefined) ? options.log : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string') {
      throw new Error('appId cannot be null or undefined and it must be of type string.');
    }
    if (query === null || query === undefined || typeof query.valueOf() !== 'string') {
      throw new Error('query cannot be null or undefined and it must be of type string.');
    }
    if (timezoneOffset !== null && timezoneOffset !== undefined && typeof timezoneOffset !== 'number') {
      throw new Error('timezoneOffset must be of type number.');
    }
    if (verbose !== null && verbose !== undefined && typeof verbose !== 'boolean') {
      throw new Error('verbose must be of type boolean.');
    }
    if (staging !== null && staging !== undefined && typeof staging !== 'boolean') {
      throw new Error('staging must be of type boolean.');
    }
    if (spellCheck !== null && spellCheck !== undefined && typeof spellCheck !== 'boolean') {
      throw new Error('spellCheck must be of type boolean.');
    }
    if (bingSpellCheckSubscriptionKey !== null && bingSpellCheckSubscriptionKey !== undefined && typeof bingSpellCheckSubscriptionKey.valueOf() !== 'string') {
      throw new Error('bingSpellCheckSubscriptionKey must be of type string.');
    }
    if (log !== null && log !== undefined && typeof log !== 'boolean') {
      throw new Error('log must be of type boolean.');
    }
    if (this.client.ocpApimSubscriptionKey === null || this.client.ocpApimSubscriptionKey === undefined || typeof this.client.ocpApimSubscriptionKey.valueOf() !== 'string') {
      throw new Error('this.client.ocpApimSubscriptionKey cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId));
  let queryParameters = [];
  if (timezoneOffset !== null && timezoneOffset !== undefined) {
    queryParameters.push('timezoneOffset=' + encodeURIComponent(timezoneOffset.toString()));
  }
  if (verbose !== null && verbose !== undefined) {
    queryParameters.push('verbose=' + encodeURIComponent(verbose.toString()));
  }
  if (staging !== null && staging !== undefined) {
    queryParameters.push('staging=' + encodeURIComponent(staging.toString()));
  }
  if (spellCheck !== null && spellCheck !== undefined) {
    queryParameters.push('spellCheck=' + encodeURIComponent(spellCheck.toString()));
  }
  if (bingSpellCheckSubscriptionKey !== null && bingSpellCheckSubscriptionKey !== undefined) {
    queryParameters.push('bing-spell-check-subscription-key=' + encodeURIComponent(bingSpellCheckSubscriptionKey));
  }
  if (log !== null && log !== undefined) {
    queryParameters.push('log=' + encodeURIComponent(log.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.ocpApimSubscriptionKey !== undefined && this.client.ocpApimSubscriptionKey !== null) {
    httpRequest.headers['Ocp-Apim-Subscription-Key'] = this.client.ocpApimSubscriptionKey;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (query !== null && query !== undefined) {
      let requestModelMapper = {
        required: true,
        serializedName: 'query',
        constraints: {
          MaxLength: 500
        },
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, query, 'query');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(query, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 409 && statusCode !== 410 && statusCode !== 414 && statusCode !== 429) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['LuisResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 400) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 401) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }
    // Deserialize Response
    if (statusCode === 403) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError3 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError3.request = msRest.stripRequest(httpRequest);
        deserializationError3.response = msRest.stripResponse(response);
        return callback(deserializationError3);
      }
    }
    // Deserialize Response
    if (statusCode === 410) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError4 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError4.request = msRest.stripRequest(httpRequest);
        deserializationError4.response = msRest.stripResponse(response);
        return callback(deserializationError4);
      }
    }
    // Deserialize Response
    if (statusCode === 429) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError5 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError5.request = msRest.stripRequest(httpRequest);
        deserializationError5.response = msRest.stripResponse(response);
        return callback(deserializationError5);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Prediction. */
class Prediction {
  /**
   * Create a Prediction.
   * @param {LUISRuntimeClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._gET = _gET;
    this._pOST = _pOST;
  }

  /**
   * Gets predictions for a given utterance, in the form of intents and entities.
   * The current maximum query size is 500 characters.
   *
   * @param {string} appId The LUIS application ID (guid).
   *
   * @param {string} query The utterance to predict.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.timezoneOffset] The timezone offset for the
   * location of the request.
   *
   * @param {boolean} [options.verbose] If true, return all intents instead of
   * just the top scoring intent.
   *
   * @param {boolean} [options.staging] Use the staging endpoint slot.
   *
   * @param {boolean} [options.spellCheck] Enable spell checking.
   *
   * @param {string} [options.bingSpellCheckSubscriptionKey] The subscription key
   * to use when enabling bing spell check
   *
   * @param {boolean} [options.log] Log query (default is true)
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  gETWithHttpOperationResponse(appId, query, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._gET(appId, query, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets predictions for a given utterance, in the form of intents and entities.
   * The current maximum query size is 500 characters.
   *
   * @param {string} appId The LUIS application ID (guid).
   *
   * @param {string} query The utterance to predict.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.timezoneOffset] The timezone offset for the
   * location of the request.
   *
   * @param {boolean} [options.verbose] If true, return all intents instead of
   * just the top scoring intent.
   *
   * @param {boolean} [options.staging] Use the staging endpoint slot.
   *
   * @param {boolean} [options.spellCheck] Enable spell checking.
   *
   * @param {string} [options.bingSpellCheckSubscriptionKey] The subscription key
   * to use when enabling bing spell check
   *
   * @param {boolean} [options.log] Log query (default is true)
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  gET(appId, query, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._gET(appId, query, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._gET(appId, query, options, optionalCallback);
    }
  }

  /**
   * Gets predictions for a given utterance, in the form of intents and entities.
   * The current maximum query size is 500 characters.
   *
   * @param {string} appId The LUIS application ID (Guid).
   *
   * @param {string} query The utterance to predict.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.timezoneOffset] The timezone offset for the
   * location of the request.
   *
   * @param {boolean} [options.verbose] If true, return all intents instead of
   * just the top scoring intent.
   *
   * @param {boolean} [options.staging] Use the staging endpoint slot.
   *
   * @param {boolean} [options.spellCheck] Enable spell checking.
   *
   * @param {string} [options.bingSpellCheckSubscriptionKey] The subscription key
   * to use when enabling bing spell check
   *
   * @param {boolean} [options.log] Log query (default is true)
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  pOSTWithHttpOperationResponse(appId, query, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._pOST(appId, query, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets predictions for a given utterance, in the form of intents and entities.
   * The current maximum query size is 500 characters.
   *
   * @param {string} appId The LUIS application ID (Guid).
   *
   * @param {string} query The utterance to predict.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.timezoneOffset] The timezone offset for the
   * location of the request.
   *
   * @param {boolean} [options.verbose] If true, return all intents instead of
   * just the top scoring intent.
   *
   * @param {boolean} [options.staging] Use the staging endpoint slot.
   *
   * @param {boolean} [options.spellCheck] Enable spell checking.
   *
   * @param {string} [options.bingSpellCheckSubscriptionKey] The subscription key
   * to use when enabling bing spell check
   *
   * @param {boolean} [options.log] Log query (default is true)
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  pOST(appId, query, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._pOST(appId, query, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._pOST(appId, query, options, optionalCallback);
    }
  }

}

module.exports = Prediction;
